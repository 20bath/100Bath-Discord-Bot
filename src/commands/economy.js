const { EmbedBuilder } = require('discord.js');
const EconomySystem = require('../utils/economySystem');
const ShopSystem = require('../utils/shopSystem');
const GamblingGames = require('../games/gamblingGames');

module.exports = {
    name: 'economy',
    description: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
    requiresDatabase: true,
    options: [
        {
            name: 'claim',
            description: '‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
            type: 1,
            options: [
                {
                    name: 'type',
                    description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                    type: 3,
                    required: true,
                    choices: [
                        { name: 'üìÖ ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', value: 'daily' },
                        { name: 'üìÖ ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', value: 'weekly' },
                        { name: 'üìÖ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', value: 'monthly' }
                    ]
                }
            ]
        },
        {
            name: 'gamble',
            description: '‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏û‡∏ô‡∏±‡∏ô',
            type: 1,
            options: [
                {
                    name: 'game',
                    description: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°',
                    type: 3,
                    required: true,
                    choices: [
                        { name: 'üé≤ Blackjack', value: 'blackjack' },
                        { name: 'üéØ Coinflip', value: 'coinflip' },
                        { name: 'üé≤ Dice', value: 'dice' },
                        { name: 'üé∞ Slots', value: 'slots' },
                        { name: 'üéØ Dart Throw', value: 'dart' },
                        { name: 'üî¢ Number Guess', value: 'number' },
                        { name: '‚úÇÔ∏è Rock Paper Scissors', value: 'rps' },
                        { name: 'üí£ Minesweeper', value: 'mine' }
                    ]
                },
                {
                    name: 'amount',
                    description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
                    type: 4,
                    required: true,
                    min_value: 100
                }
            ]
        },
        {
            name: 'work',
            description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
            type: 1
        },
        {
            name: 'profile',
            description: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
            type: 1,
            options: [
                {
                    name: 'user',
                    description: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ = ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)',
                    type: 6,
                    required: false
                }
            ]
        }
    ],
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        try {
            switch (subcommand) {
                case 'claim': {
                    const type = interaction.options.getString('type');
                    const result = await EconomySystem.claimReward(
                        interaction.user.id,
                        interaction.guild.id,
                        type
                    );

                    if (result.success) {
                        const embed = new EmbedBuilder()
                            .setColor('#FFD700')
                            .setTitle(`üí∞ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•${type}`)
                            .setDescription(`${interaction.user} ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß!`)
                            .addFields(
                                { name: 'üíµ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö', value: `${result.reward.coins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                                { name: 'üíé ‡πÇ‡∏ö‡∏ô‡∏±‡∏™', value: `${result.reward.gems} ‡πÄ‡∏û‡∏ä‡∏£`, inline: true }
                            )
                            .setTimestamp();

                        return await interaction.editReply({ embeds: [embed] });
                    } else {
                        const timeLeft = Math.ceil(result.timeRemaining / (1000 * 60 * 60));
                        const embed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle('‚è∞ ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå')
                            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${timeLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`)
                            .setFooter({ text: '‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á' });

                        return await interaction.editReply({ embeds: [embed] });
                    }
                }

                case 'work': {
                    const result = await EconomySystem.work(
                        interaction.user.id,
                        interaction.guild.id
                    );

                    if (result.success) {
                        const embed = new EmbedBuilder()
                            .setColor('#00FF00')
                            .setTitle('üíº ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
                            .setDescription(`${interaction.user} ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`)
                            .setThumbnail(interaction.user.displayAvatarURL())
                            .addFields(
                                { name: 'üíµ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö', value: `${result.earnedCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                            )
                            .setFooter({ text: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' })
                            .setTimestamp();

                        return await interaction.editReply({ embeds: [embed] });
                    } else {
                        const minutes = Math.ceil(result.timeRemaining / (1000 * 60));
                        const embed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle('‚è∞ ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå')
                            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
                            .setFooter({ text: '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...' });

                        return await interaction.editReply({ embeds: [embed] });
                    }
                }

                case 'gamble': {
                    const amount = interaction.options.getInteger('amount');
                    const game = interaction.options.getString('game');
                    
                    const userData = await EconomySystem.getUserData(interaction.user.id, interaction.guild.id);
                    if (userData.coins < amount) {
                        const embed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle('‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠')
                            .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
                        return await interaction.editReply({ embeds: [embed] });
                    }

                    let result;
                    switch (game) {
                        case 'blackjack':
                            result = await GamblingGames.playBlackjack(interaction, amount);
                            break;
                        case 'coinflip':
                            result = await GamblingGames.playCoinflip(interaction, amount);
                            break;
                        case 'dice':
                            result = await GamblingGames.playDice(interaction, amount);
                            break;
                        case 'slots':
                            result = await GamblingGames.playSlots(interaction, amount);
                            break;
                        case 'rps':
                            result = await GamblingGames.playRPS(interaction, amount);
                            break;
                        case 'number':
                            result = await GamblingGames.playNumberGuess(interaction, amount);
                            break;
                        case 'dart':
                            result = await GamblingGames.playDartThrow(interaction, amount);
                            break;
                        case 'mine':
                            result = await GamblingGames.playMinesweeper(interaction, amount);
                            break;
                        default:
                            const embed = new EmbedBuilder()
                                .setColor('#FF0000')
                                .setTitle('‚ùå ‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
                                .setDescription('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
                            return await interaction.editReply({ embeds: [embed] });
                    }

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö result ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏á‡∏¥‡∏ô
                    if (result && typeof result.amount !== 'undefined') {
                        await EconomySystem.updateBalance(
                            interaction.user.id,
                            interaction.guild.id,
                            result.amount,
                            0,
                            'gambling'
                        );

                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô
                        if (result.won) {
                            await EconomySystem.updateGamblingStats(
                                interaction.user.id,
                                interaction.guild.id,
                                true
                            );
                        } else {
                            await EconomySystem.updateGamblingStats(
                                interaction.user.id,
                                interaction.guild.id,
                                false
                            );
                        }
                    }

                    return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reply ‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ reply ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß
                }

                case 'inventory': {
                    const userData = await EconomySystem.getUserData(interaction.user.id, interaction.guild.id);
                    if (!userData.inventory || userData.inventory.length === 0) {
                        const embed = new EmbedBuilder()
                            .setColor('#808080')
                            .setTitle('üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
                            .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏î‡πÜ')
                            .setThumbnail(interaction.user.displayAvatarURL());
                        return await interaction.editReply({ embeds: [embed] });
                    }

                    const embed = new EmbedBuilder()
                        .setColor('#0099ff')
                        .setTitle('üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
                        .setThumbnail(interaction.user.displayAvatarURL());

                    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    const items = userData.inventory.reduce((acc, item) => {
                        const itemData = ShopSystem.getItemData(item.id);
                        if (!acc[itemData.type]) acc[itemData.type] = [];
                        acc[itemData.type].push({
                            ...itemData,
                            purchasedAt: item.purchasedAt
                        });
                        return acc;
                    }, {});

                    if (items.role) {
                        embed.addFields({
                            name: 'üëë ‡∏¢‡∏® VIP',
                            value: items.role.map(item => 
                                `${item.name}\n` +
                                `‚îó ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(item.purchasedAt).toLocaleString()}`
                            ).join('\n\n')
                        });
                    }

                    if (items.consumable) {
                        embed.addFields({
                            name: 'üéÆ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                            value: items.consumable.map(item =>
                                `${item.name}\n` +
                                `‚î£ ${item.description}\n` +
                                `‚îó ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(item.purchasedAt).toLocaleString()}`
                            ).join('\n\n')
                        });
                    }

                    return await interaction.editReply({ embeds: [embed] });
                }

                case 'use': {
                    const itemId = interaction.options.getString('item');
                    const result = await EconomySystem.useItem(
                        interaction.user.id,
                        interaction.guild.id,
                        itemId
                    );

                    if (result.success) {
                        const embed = new EmbedBuilder()
                            .setColor('#00FF00')
                            .setTitle('‚ú® ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
                            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ ${result.item.name}`)
                            .addFields(
                                { name: 'üìù ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: result.message }
                            )
                            .setFooter({ text: '‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' })
                            .setTimestamp();

                        return await interaction.editReply({ embeds: [embed] });
                    } else {
                        const embed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                            .setDescription(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÑ‡∏î‡πâ: ${result.reason}`);

                        return await interaction.editReply({ embeds: [embed] });
                    }
                }
            }
        } catch (error) {
            console.error('Error in economy command:', error);
            const embed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            return await interaction.editReply({ embeds: [embed] });
        }
    }
};