const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const WorkSystem = require("../utils/workSystem");
const EconomySystem = require("../utils/economySystem");
const levelSystem = require("../utils/levelSystem");

module.exports = {
  data: (() => {
    const command = new SlashCommandBuilder()
      .setName("work")
      .setDescription("‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
      .addSubcommand((subcommand) =>
        subcommand
          .setName("start")
          .setDescription("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
          .addStringOption((option) => {
            const jobOption = option
              .setName("job")
              .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
              .setRequired(true);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° choices ‡πÅ‡∏ö‡∏ö Dynamic ‡∏à‡∏≤‡∏Å WorkSystem
            const jobs = WorkSystem.getJobChoices();
            jobs.forEach((job) => {
              jobOption.addChoices(job);
            });

            return jobOption;
          })
      )
      .addSubcommand((subcommand) =>
        subcommand.setName("info").setDescription("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
      );

    return command;
  })(),

  async execute(interaction) {
    try {
      await interaction.deferReply();
      const subcommand = interaction.options.getSubcommand();

      if (subcommand === "info") {
        const userLevel = await levelSystem.getLevel(interaction.user.id);
        const embed = new EmbedBuilder()
          .setTitle("üíº ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
          .setColor("#0099ff")
          .setDescription("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ:");

        for (const job of WorkSystem.getJobs()) {
          const jobLevel = await WorkSystem.getJobLevel(
            interaction.user.id,
            job.id
          );
          const isLocked = job.requiredLevel > userLevel;

          embed.addFields({
            name: `${isLocked ? "üîí" : "‚úÖ"} ${job.name}`,
            value:
              `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•: ${job.requiredLevel}\n` +
              `‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${jobLevel}\n` +
              `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ${job.pay.base} ‡∏ö‡∏≤‡∏ó\n` +
              `EXP ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ${job.exp.base}\n` +
              `‚è∞ ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå: ${job.cooldown / 60000} ‡∏ô‡∏≤‡∏ó‡∏µ\n` +
              `‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${job.items.map((item) => item.name).join(", ")}`,
            inline: false,
          });
        }

        embed.setFooter({
          text: `‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${userLevel}`,
        });

        return interaction.editReply({ embeds: [embed] });
      }

      // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      const jobId = interaction.options.getString("job");
      const job = WorkSystem.jobs.find((j) => j.id === jobId);

      if (!job) {
        return interaction.editReply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          ephemeral: true,
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
      const jobCooldown = await WorkSystem.checkJobCooldown(
        interaction.user.id,
        jobId
      );
      if (jobCooldown > 0) {
        const minutes = Math.floor(jobCooldown / 60000);
        const seconds = Math.floor((jobCooldown % 60000) / 1000);

        return interaction.editReply({
          content: `‚è∞ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${job.name} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${
            minutes > 0 ? `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ` : ""
          }${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`,
          flags: ["Ephemeral"],
        });
      }

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      const result = await WorkSystem.work(interaction.user, jobId);

      if (!result.success) {
        const errorMessages = {
          level_too_low: "‚ùå ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ô‡∏µ‡πâ",
          invalid_job: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          system_error: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        };
        return interaction.editReply({
          content:
            errorMessages[result.reason] || "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
          flags: ["Ephemeral"],
        });
      }

      const embed = new EmbedBuilder()
        .setTitle("üíº ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        .setColor("#00ff00")
        .addFields(
          {
            name: "üëî ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
            value: `${result.job} (Lv.${result.jobLevel})`,
            inline: true,
          },
          {
            name: "üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
            value: `${result.amount} ‡∏ö‡∏≤‡∏ó`,
            inline: true,
          },
          {
            name: "‚≠ê EXP",
            value: `+${result.exp} EXP`,
            inline: true,
          }
        )
        .setFooter({
          text: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${result.newBalance} ‡∏ö‡∏≤‡∏ó`,
        })
        .setTimestamp();

      // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (result.items) {
        embed.addFields({
          name: "üéÅ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©",
          value: result.items
            .map((item) => `${item.name} (${item.value} ‡∏ö‡∏≤‡∏ó)`)
            .join("\n"),
          inline: false,
        });
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏ä‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (result.gems && result.gems.length > 0) {
        // Group gems by type and count
        const gemCounts = result.gems.reduce((acc, gem) => {
          if (!acc[gem.type]) {
            acc[gem.type] = {
              name: gem.name,
              count: 0,
            };
          }
          acc[gem.type].count++;
          return acc;
        }, {});

        embed.addFields({
          name: "üíé ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏ä‡∏£",
          value: Object.values(gemCounts)
            .map((gem) => `${gem.name} (‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${gem.count} ‡πÄ‡∏°‡πá‡∏î)`)
            .join("\n"),
          inline: false,
        });
      }
      
      // Get user profile to access dailyGemsEarned
      const userProfile = await EconomySystem.getProfile(interaction.user.id);
      
      // Add to work command embed
      embed.addFields({
        name: "üíé ‡πÄ‡∏û‡∏ä‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        value: `${userProfile.dailyGemsEarned}/${WorkSystem.GEM_CONFIG.DAILY_LIMIT}`,
        inline: true
      });

      if (userProfile.dailyGemsEarned >= WorkSystem.GEM_CONFIG.DAILY_LIMIT) {
        embed.addFields({
          name: "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
          value: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏ä‡∏£‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß",
          inline: false
        });
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (result.levelUp) {
        embed.addFields({
          name: "üéâ ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û!",
          value: `‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${result.jobLevel + 1}`,
          inline: false,
        });
      }

      await WorkSystem.setJobCooldown(interaction.user.id, jobId, job.cooldown);
      await interaction.editReply({ embeds: [embed] });
    } catch (error) {
      console.error("Error in work command:", error);
      if (interaction.deferred) {
        return interaction.editReply({
          content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
          ephemeral: true,
        });
      }
      return interaction.editReply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
        ephemeral: true,
      });
    }
  },
};
