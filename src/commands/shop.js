const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType
} = require("discord.js");
const ShopSystem = require("../utils/shopSystem");
const EconomySystem = require("../utils/economySystem");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("shop")
    .setDescription("‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏®‡∏û‡∏¥‡πÄ‡∏®‡∏©"),

  async execute(interaction) {
    try {
      const profile = await EconomySystem.getProfile(interaction.user.id);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
      await showMainMenu(interaction, profile);
      
    } catch (error) {
      console.error("Shop error:", error);
      await interaction.reply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
        ephemeral: true,
      });
    }
  },
};

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
async function showMainMenu(interaction, profile) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏´‡∏•‡∏±‡∏Å
  const embed = new EmbedBuilder()
    .setTitle("üè™ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ 100 Bath")
    .setColor("#2b2d31")
    .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
    .addFields({
      name: "üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      value: `${profile.balance.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
      inline: true,
    })
    .setFooter({
      text: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ 100 Bath ‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
    })
    .setThumbnail("https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152915/shop_banner.png");

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const categories = ShopSystem.getCategoryInfo();
  const selectOptions = [];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select menu
  for (const [categoryId, category] of Object.entries(categories)) {
    selectOptions.push({
      label: category.name,
      description: category.description.split('\n')[0].substring(0, 100),
      value: categoryId,
      emoji: category.emoji,
    });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á select menu
  const categorySelect = new StringSelectMenuBuilder()
    .setCustomId("shop_category")
    .setPlaceholder("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    .addOptions(selectOptions);

  const row = new ActionRowBuilder().addComponents(categorySelect);
  
  const response = await interaction.reply({
    embeds: [embed],
    components: [row],
    fetchReply: true,
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á collector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components
  const collector = response.createMessageComponentCollector({
    time: 300000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  });

  collector.on("collect", async (i) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (i.user.id !== interaction.user.id) {
      return i.reply({
        content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ",
        ephemeral: true,
      });
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const updatedProfile = await EconomySystem.getProfile(interaction.user.id);

    if (i.customId === "shop_category") {
      const categoryId = i.values[0];
      await showCategoryItems(i, categoryId, updatedProfile, 0);
    } else if (i.customId.startsWith("buy_")) {
      await handleBuyItem(i, updatedProfile);
    } else if (i.customId === "shop_back") {
      await i.update({
        embeds: [embed],
        components: [row],
      });
    } else if (i.customId.startsWith("page_")) {
      const [_, categoryId, pageStr] = i.customId.split("_");
      const page = parseInt(pageStr);
      await showCategoryItems(i, categoryId, updatedProfile, page);
    }
  });

  collector.on("end", () => {
    // Remove components when collector ends
    interaction.editReply({
      components: [],
    }).catch(console.error);
  });
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
async function showCategoryItems(interaction, categoryId, profile, page) {
  const categoryInfo = ShopSystem.getCategoryInfo()[categoryId];
  
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÄ‡∏û‡∏ä‡∏£)
  if (categoryId === "gems") {
    return showGemsShop(interaction, profile);
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const { items, totalPages, currentPage } = ShopSystem.getItemsForPage(
    categoryId, 
    page, 
    3, // items per page
    profile.balance
  );

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
  const embed = new EmbedBuilder()
    .setTitle(`üè™ ${categoryInfo.name}`)
    .setColor(categoryInfo.color || "#2b2d31")
    .setDescription(categoryInfo.description)
    .setThumbnail(categoryInfo.thumbnail || "https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152915/shop_banner.png")
    .addFields({
      name: "üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      value: `${profile.balance.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
      inline: true,
    });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
  if (items.length > 0) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏´‡∏ô‡πâ‡∏≤
    if (totalPages > 1) {
      embed.setFooter({
        text: `‡∏´‡∏ô‡πâ‡∏≤ ${currentPage + 1}/${totalPages} ‚Ä¢ ${items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      });
    }
    
    items.forEach((item) => {
      const canAfford = profile.balance >= item.price;
      const priceColor = canAfford ? "GREEN" : "RED";
      
      embed.addFields({
        name: item.name,
        value: ShopSystem.getItemDetails(item),
        inline: false,
      });
    });
  } else {
    embed.addFields({
      name: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
      value: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ",
      inline: false,
    });
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  if (categoryInfo.note) {
    embed.addFields({
      name: "üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏",
      value: categoryInfo.note,
      inline: false,
    });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const buttons = [];
  items.forEach((item) => {
    const canAfford = profile.balance >= item.price;
    buttons.push(
      new ButtonBuilder()
        .setCustomId(`buy_${item.id}`)
        .setLabel(`‡∏ã‡∏∑‡πâ‡∏≠ ${item.name}`)
        .setStyle(canAfford ? ButtonStyle.Primary : ButtonStyle.Secondary)
        .setDisabled(!canAfford)
    );
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏°
  const buttonRows = [];
  if (buttons.length > 0) {
    buttonRows.push(new ActionRowBuilder().addComponents(buttons));
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á (pagination)
  const navigationRow = new ActionRowBuilder();
  
  // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
  const backButton = new ButtonBuilder()
    .setCustomId("shop_back")
    .setLabel("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å")
    .setStyle(ButtonStyle.Secondary)
    .setEmoji("üîô");
  
  navigationRow.addComponents(backButton);

  // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)
  if (totalPages > 1) {
    // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const prevButton = new ButtonBuilder()
      .setCustomId(`page_${categoryId}_${currentPage - 1}`)
      .setLabel("‚óÄÔ∏è")
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(currentPage === 0);
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    const nextButton = new ButtonBuilder()
      .setCustomId(`page_${categoryId}_${currentPage + 1}`)
      .setLabel("‚ñ∂Ô∏è")
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(currentPage === totalPages - 1);
    
    navigationRow.addComponents(prevButton, nextButton);
  }
  
  buttonRows.push(navigationRow);

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó interaction
  await interaction.update({
    embeds: [embed],
    components: buttonRows,
  });
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏ä‡∏£
async function showGemsShop(interaction, profile) {
  const categoryInfo = ShopSystem.getCategoryInfo().gems;
  
  const gemsEmbed = new EmbedBuilder()
    .setTitle("üíé ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡∏Å‡∏≤‡∏ä‡∏≤")
    .setColor(categoryInfo.color || "#2b2d31")
    .setDescription(categoryInfo.description)
    .setImage("attachment://promptpay.jpg")
    .addFields(
      {
        name: "üíé ‡πÄ‡∏û‡∏ä‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        value: `${profile.gems?.common || 0} ‡πÄ‡∏û‡∏ä‡∏£`,
        inline: true
      }
    )
    .setFooter({ text: "‡πÄ‡∏û‡∏ä‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" });

  const backButton = new ButtonBuilder()
    .setCustomId("shop_back")
    .setLabel("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å")
    .setStyle(ButtonStyle.Secondary)
    .setEmoji("üîô");

  await interaction.update({
    embeds: [gemsEmbed],
    files: ["./src/Assets/PromptPay/promptpay.jpg"],
    components: [new ActionRowBuilder().addComponents(backButton)]
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
async function handleBuyItem(interaction, profile) {
  const itemId = interaction.customId.replace("buy_", "");
  
  const result = await ShopSystem.buyItem(
    interaction.user.id,
    itemId,
    interaction.guildId,
    interaction.client
  );

  if (!result.success) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ embed ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    if (result.embed) {
      await interaction.reply({
        embeds: [result.embed],
        ephemeral: true,
      });
      return;
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    const errorMessages = {
      insufficient_funds: "‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
      already_owned: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
      item_not_found: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ",
      role_add_failed: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
      guild_or_client_required: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
      max_stack_reached: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
    };

    await interaction.reply({
      content: errorMessages[result.reason] || "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      ephemeral: true,
    });
    return;
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const item = result.item;
  const successEmbed = new EmbedBuilder()
    .setTitle("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    .setColor("#00ff00")
    .setDescription(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠ **${item.name}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
    .addFields(
      {
        name: "üéÅ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°",
        value: item.name,
        inline: true,
      },
      {
        name: "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤",
        value: `${item.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
        inline: true,
      },
      {
        name: "üíµ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
        value: `${result.newBalance.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
        inline: true,
      }
    );

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
  if (item.type === "temporary") {
    successEmbed.addFields({
      name: "üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
      value: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/inventory`",
      inline: false,
    });
  } else if (item.type === "role") {
    successEmbed.addFields({
      name: "üëë ‡∏¢‡∏®‡∏û‡∏¥‡πÄ‡∏®‡∏©",
      value: "‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
      inline: false,
    });
  }

  await interaction.reply({
    embeds: [successEmbed],
    ephemeral: true,
  });
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  const updatedProfile = await EconomySystem.getProfile(interaction.user.id);
  
  // ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
  let itemCategory = null;
  for (const [category, items] of Object.entries(ShopSystem.getShopItems())) {
    if (itemId in items) {
      itemCategory = category;
      break;
    }
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const message = await interaction.message;
  if (message && itemCategory) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    let currentPage = 0;
    for (const row of message.components) {
      for (const component of row.components) {
        if (component.customId && component.customId.startsWith(`page_${itemCategory}_`)) {
          const pageNumMatch = component.customId.match(/page_\w+_(\d+)/);
          if (pageNumMatch && pageNumMatch[1]) {
            const nearbyPage = parseInt(pageNumMatch[1]);
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô = ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - 1
            currentPage = Math.max(0, nearbyPage - 1);
          }
        }
      }
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    await showCategoryItems(interaction, itemCategory, updatedProfile, currentPage);
  }
}

function getCategoryName(category) {
  const categories = ShopSystem.getCategoryInfo();
  return categories[category]?.name || category;
}
