const { EmbedBuilder } = require('discord.js');
const ShopSystem = require('../utils/shopSystem');
const EconomySystem = require('../utils/economySystem');

module.exports = {
    name: 'shop',
    description: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
    options: [
        {
            name: 'view',
            description: '‡∏î‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
            type: 1
        },
        {
            name: 'buy',
            description: '‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°',
            type: 1,
            options: [
                {
                    name: 'item',
                    description: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠',
                    type: 3,
                    required: true,
                    choices: [
                        { name: 'üëë Noble', value: 'rank_noble' },
                        { name: '‚öîÔ∏è Royal Knight', value: 'rank_knight' },
                        { name: 'üëë Grand Duke', value: 'rank_duke' },
                        { name: 'üè∞ Emperor', value: 'rank_emperor' },
                        { name: 'üçÄ Lucky Charm', value: 'lucky_charm' },
                        { name: '‚≠ê EXP Elixir', value: 'exp_elixir' },
                        { name: 'üí∞ Fortune Potion', value: 'fortune_potion' }
                    ]
                }
            ]
        }
    ],
    async execute(interaction) {
        try {
            const subcommand = interaction.options.getSubcommand();
            if (subcommand === 'view') {
                const shopData = ShopSystem.getShopItems();
                const userData = await EconomySystem.getUserData(interaction.user.id, interaction.guild.id);

                const embed = new EmbedBuilder()
                    .setColor('#ffd700')
                    .setTitle('üè∞ Royal Market')
                    .setDescription(
                        `üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${userData.coins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç\n` +
                        `üíé ‡πÄ‡∏û‡∏ä‡∏£: ${userData.gems.toLocaleString()} ‡πÄ‡∏û‡∏ä‡∏£`
                    )
                    .addFields(
                        {
                            name: 'üëë ‡∏¢‡∏®‡∏û‡∏¥‡πÄ‡∏®‡∏©',
                            value: shopData.roles.map(role => 
                                `${role.name}\n` +
                                `‚î£ üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${role.price.coins?.toLocaleString() || 0} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ` +
                                `${role.price.gems ? `+ ${role.price.gems} ‡πÄ‡∏û‡∏ä‡∏£` : ''}\n` +
                                `‚î£ üìà ‡πÇ‡∏ö‡∏ô‡∏±‡∏™: +${((role.benefits.expBonus - 1) * 100).toFixed(0)}%\n` +
                                `‚îó üìù ${role.description}`
                            ).join('\n\n')
                        },
                        {
                            name: 'üéÆ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©',
                            value: shopData.items.map(item =>
                                `${item.name}\n` +
                                `‚î£ üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${item.price.coins?.toLocaleString() || 0} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ` +
                                `${item.price.gems ? `+ ${item.price.gems} ‡πÄ‡∏û‡∏ä‡∏£` : ''}\n` +
                                `‚îó üìù ${item.description}`
                            ).join('\n\n')
                        }
                    )
                    .setFooter({ 
                        text: 'üí° ‡πÉ‡∏ä‡πâ /shop buy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°',
                        iconURL: interaction.guild.iconURL()
                    })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [embed] });
            } else if (subcommand === 'buy') {
                const itemId = interaction.options.getString('item');
                const result = await ShopSystem.buyItem(interaction.user.id, interaction.guild.id, itemId);

                if (!result.success) {
                    const reasons = {
                        'item_not_found': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ',
                        'not_enough_coins': '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠',
                        'not_enough_gems': '‡πÄ‡∏û‡∏ä‡∏£‡πÑ‡∏°‡πà‡∏û‡∏≠'
                    };
                    return await interaction.editReply({
                        content: `‚ùå ${reasons[result.reason] || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`,
                        ephemeral: true
                    });
                }

                const embed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('üõçÔ∏è ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
                    .setDescription(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠ **${result.item.name}**`)
                    .addFields(
                        { name: 'üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤', value: `${result.item.price.coins || 0} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${result.item.price.gems ? `+ ${result.item.price.gems} ‡πÄ‡∏û‡∏ä‡∏£` : ''}` },
                        { name: 'üí≥ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', value: `${result.newBalance.coins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç, ${result.newBalance.gems} ‡πÄ‡∏û‡∏ä‡∏£` }
                    )
                    .setTimestamp();

                return await interaction.editReply({ embeds: [embed] });
            }
        } catch (error) {
            console.error('Error in shop command:', error);
            return await interaction.editReply({
                content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                ephemeral: true
            });
        }
    }
};