const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const EconomySystem = require("../utils/economySystem");
const WorkSystem = require("../utils/workSystem"); // Add this line

// Add this function at the bottom of the file (before module.exports)
async function generateJobStats(userId) {
  const jobs = WorkSystem.getJobs();
  const stats = [];

  for (const job of jobs) {
    const jobLevel = await WorkSystem.getJobLevel(userId, job.id);
    const jobExpNeeded = 100 * Math.pow(1.5, jobLevel);
    const profile = await EconomySystem.getProfile(userId);
    const currentJobExp = profile.jobExp?.[job.id] || 0;
    const progressPercent = ((currentJobExp / jobExpNeeded) * 100).toFixed(1);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Progress Bar
    const progressBar = createProgressBar(currentJobExp, jobExpNeeded, 10);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ï‡πà‡∏≤‡∏á‡πÜ
    growthPercent = 5; // 5%
    const payBonus = (growthPercent * jobLevel)
    const itemChanceBonus = (growthPercent * jobLevel)

    stats.push(
      `**${job.name}** (Lv.${jobLevel})\n` +
        `‚îó EXP: ${progressBar} (${progressPercent}%)\n` +
        `‚îó ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: +${payBonus}%\n` +
        `‚îó ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏≠‡πÄ‡∏ó‡∏°: +${itemChanceBonus}%\n`
    );
  }

  return stats.join("\n") || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û";
}

function createProgressBar(current, max, length) {
  const progress = Math.floor((current / max) * length);
  const emptyProgress = length - progress;
  const progressText = "‚ñà".repeat(progress);
  const emptyProgressText = "‚ñí".repeat(emptyProgress);
  return progressText + emptyProgressText;
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName("profile")
    .setDescription("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à")
    .addUserOption((option) =>
      option
        .setName("user")
        .setDescription("‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        .setRequired(false)
    )
    .addStringOption((option) =>
      option
        .setName("mode")
        .setDescription("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
        .addChoices(
          { name: "üîÑ ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", value: "simple" },
          { name: "üìä ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value: "advanced" }
        )
        .setRequired(false)
    ),

  async execute(interaction) {
    try {
      const targetUser =
        interaction.options.getUser("user") || interaction.user;
      const mode = interaction.options.getString("mode") || "simple";
      const profile = await EconomySystem.getProfile(targetUser.id);

      if (!profile) {
        return interaction.reply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ",
          flags: ["Ephemeral"],
        });
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const netWorth = profile.balance;
      const netGambling =
        profile.stats.gamblingStats.totalEarned -
        profile.stats.gamblingStats.totalLost;
      const winRate =
        profile.stats.gamblingStats.gamesPlayed > 0
          ? (
              (profile.stats.gamblingStats.won /
                profile.stats.gamblingStats.gamesPlayed) *
              100
            ).toFixed(1)
          : 0;

      if (mode === "simple") {
        // ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
        const embed = new EmbedBuilder()
          .setTitle(`üí∞ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á ${targetUser.username}`)
          .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
          .setColor("#00ff00")
          .addFields(
            {
              name: "üíµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
              value:
                `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${profile.balance} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${profile.bankBalance} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥: ${profile.stats.workStats.jobsCompleted} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏ô‡∏±‡∏ô: ${profile.stats.gamblingStats.gamesPlayed} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
              inline: false,
            },
            {
              name: "üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
              value:
                `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${profile.stats.workStats.lastPaycheck} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏ô: ${winRate}%\n` +
                `‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏û‡∏ô‡∏±‡∏ô: ${netGambling} ‡∏ö‡∏≤‡∏ó`,
              inline: false,
            }
          )
          .setFooter({
            text: "üí° ‡πÉ‡∏ä‡πâ /profile mode:‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
          })
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
      } else {
        // ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        const embed = new EmbedBuilder()
          .setTitle(`üìä ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á ${targetUser.username}`)
          .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
          .setColor("#0099ff")
          .addFields(
            {
              name: "üíµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô",
              value:
                `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${profile.balance} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${profile.bankBalance} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${profile.stats.totalEarned} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${profile.stats.totalLost} ‡∏ö‡∏≤‡∏ó`,
              inline: false,
            },
            {
              name: "üëî ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
              value:
                `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${profile.stats.workStats.jobsCompleted} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${profile.stats.workStats.totalWorked} ‡∏ö‡∏≤‡∏ó\n` +
                `‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${profile.stats.workStats.lastPaycheck} ‡∏ö‡∏≤‡∏ó`,
              inline: false,
            },
            {
              name: "üëî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
              value: await generateJobStats(targetUser.id),
              inline: false,
            },
            {
              name: "üé≤ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô",
              value:
                `‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${profile.stats.gamblingStats.gamesPlayed} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‡∏ä‡∏ô‡∏∞: ${profile.stats.gamblingStats.won} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${winRate}%)\n` +
                `‡πÅ‡∏û‡πâ: ${profile.stats.gamblingStats.lost} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‡∏ä‡∏ô‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${profile.stats.gamblingStats.biggestWin} ‡∏ö‡∏≤‡∏ó\n` +
                `‡πÅ‡∏û‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${profile.stats.gamblingStats.biggestLoss} ‡∏ö‡∏≤‡∏ó\n` +
                `‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${netGambling} ‡∏ö‡∏≤‡∏ó`,
              inline: false,
            },
            {
              name: "üí∏ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
              value:
                `**‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á**\n` +
                `‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ${profile.stats.transferStats.sent.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‚Ä¢ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: ${profile.stats.transferStats.sent.total} ‡∏ö‡∏≤‡∏ó\n` +
                `‚Ä¢ ‡πÇ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${profile.stats.transferStats.sent.largest} ‡∏ö‡∏≤‡∏ó\n` +
                `‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏£‡∏ß‡∏°: ${profile.stats.transferStats.sent.fees} ‡∏ö‡∏≤‡∏ó\n\n` +
                `**‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö**\n` +
                `‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ${profile.stats.transferStats.received.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `‚Ä¢ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: ${profile.stats.transferStats.received.total} ‡∏ö‡∏≤‡∏ó\n` +
                `‚Ä¢ ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${profile.stats.transferStats.received.largest} ‡∏ö‡∏≤‡∏ó`,
              inline: false,
            }
          )
          .setFooter({
            text: `‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(profile.createdAt).toLocaleString(
              "th-TH"
            )}`,
          })
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
      }
    } catch (error) {
      console.error("Error in profile command:", error);
      await interaction.reply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
        flags: ["Ephemeral"],
      });
    }
  },
};
