const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } = require('discord.js');
const { createCanvas, loadImage, registerFont } = require('canvas');
const path = require('path');

// Register Thai font
registerFont(path.join(__dirname, '../fonts/Sarabun-Regular.ttf'), { family: 'Sarabun' });
registerFont(path.join(__dirname, '../fonts/Sarabun-Bold.ttf'), { family: 'Sarabun-Bold' });

module.exports = {
    data: new SlashCommandBuilder()
        .setName('tutorial')
        .setDescription('‡∏™‡∏≠‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ'),

    async execute(interaction) {
        await interaction.deferReply();

        try {
            const canvas = createCanvas(800, 400);
            const ctx = canvas.getContext('2d');

            // Clean white background
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Minimal border design
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.lineWidth = 1;
            ctx.strokeRect(15, 15, canvas.width - 30, canvas.height - 30);

            // Corner accents
            const cornerSize = 20;
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.lineWidth = 2;

            // Draw corners
            [
                [15, 35, 15, 15, 35, 15], // Top-left
                [canvas.width - 35, 15, canvas.width - 15, 15, canvas.width - 15, 35], // Top-right
                [15, canvas.height - 35, 15, canvas.height - 15, 35, canvas.height - 15], // Bottom-left
                [canvas.width - 35, canvas.height - 15, canvas.width - 15, canvas.height - 15, canvas.width - 15, canvas.height - 35] // Bottom-right
            ].forEach(([x1, y1, x2, y2, x3, y3]) => {
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.lineTo(x3, y3);
                ctx.stroke();
            });

            // Subtle diagonal pattern
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.02)';
            ctx.lineWidth = 1;
            for (let i = -canvas.height; i < canvas.width; i += 20) {
                ctx.beginPath();
                ctx.moveTo(i, 0);
                ctx.lineTo(i + canvas.height, canvas.height);
                ctx.stroke();
            }

            // Top accent line with gradient
            const accentGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
            accentGradient.addColorStop(0, '#4361ee');
            accentGradient.addColorStop(1, '#3f37c9');
            ctx.fillStyle = accentGradient;
            ctx.fillRect(0, 0, canvas.width, 4);

            // Modern title
            ctx.font = 'bold 32px Sarabun';
            ctx.fillStyle = '#2c2c2c';
            ctx.textAlign = 'center';
            ctx.fillText('üéÆ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°', canvas.width / 2, 50);

            // Content sections with modern design
            const sections = [
                {
                    icon: 'üéØ',
                    title: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                    commands: ['/start', '/profile', '/help'],
                    descriptions: ['‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£', '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£', '‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î']
                },
                {
                    icon: 'üí∞',
                    title: '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
                    commands: ['/work', '/bank', '/shop'],
                    descriptions: ['‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°']
                },
                {
                    icon: '‚≠ê',
                    title: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©',
                    commands: ['/quest', '/gacha', '/achievement'],
                    descriptions: ['‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô', '‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à']
                }
            ];

            let yPos = 80;
            sections.forEach((section, index) => {
                // Section container with subtle shadow
                ctx.save();
                ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';
                ctx.shadowBlur = 10;
                ctx.shadowOffsetY = 2;
                ctx.fillStyle = '#ffffff';
                ctx.fillRect(30, yPos, canvas.width - 60, 90);
                ctx.restore();

                // Section icon and title
                ctx.font = '24px Sarabun';
                ctx.fillStyle = '#4361ee';
                ctx.textAlign = 'left';
                ctx.fillText(section.icon, 45, yPos + 35);

                ctx.font = 'bold 22px Sarabun';
                ctx.fillStyle = '#2c2c2c';
                ctx.fillText(section.title, 85, yPos + 35);

                // Commands with descriptions
                section.commands.forEach((cmd, i) => {
                    ctx.font = '18px Sarabun';
                    ctx.fillStyle = '#666666';
                    ctx.fillText(`${cmd}`, 45, yPos + 65 + (i * 25));
                    
                    ctx.fillStyle = '#999999';
                    ctx.fillText(`- ${section.descriptions[i]}`, 150, yPos + 65 + (i * 25));
                });

                yPos += 100;
            });

            // Bottom accent with gradient
            const bottomGradient = ctx.createLinearGradient(0, canvas.height - 40, 0, canvas.height);
            bottomGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
            bottomGradient.addColorStop(1, 'rgba(0, 0, 0, 0.02)');
            ctx.fillStyle = bottomGradient;
            ctx.fillRect(0, canvas.height - 40, canvas.width, 40);

            // Footer text
            ctx.font = '18px Sarabun';
            ctx.fillStyle = '#666666';
            ctx.textAlign = 'center';
            ctx.fillText('üí° ‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î | ‡∏û‡∏¥‡∏°‡∏û‡πå /support ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', canvas.width / 2, canvas.height - 20);

            const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'tutorial.png' });

            // Interactive buttons
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('getting_started')
                        .setLabel('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('economy')
                        .setLabel('üí∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('activities')
                        .setLabel('‚≠ê ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©')
                        .setStyle(ButtonStyle.Primary)
                );

            const response = await interaction.editReply({
                files: [attachment],
                components: [buttons]
            });

            // Button interactions
            const collector = response.createMessageComponentCollector({ time: 300000 });

            collector.on('collect', async i => {
                if (i.user.id !== interaction.user.id) {
                    return i.reply({ content: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /tutorial ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á', ephemeral: true });
                }

                const guides = {
                    getting_started: {
                        title: 'üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                        description: [
                            '**1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£**',
                            '‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/start` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                            '‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì',
                            '‚Ä¢ ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n',
                            '**2. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£**',
                            '‚Ä¢ ‡πÉ‡∏ä‡πâ `/profile` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£',
                            '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•, ‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡∏°',
                            '‚Ä¢ ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£'
                        ].join('\n')
                    },
                    economy: {
                        title: 'üí∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
                        description: [
                            '**‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô**',
                            '‚Ä¢ ‡πÉ‡∏ä‡πâ `/work` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
                            '‚Ä¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™',
                            '‚Ä¢ ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n',
                            '**‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô**',
                            '‚Ä¢ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
                            '‚Ä¢ ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
                            '‚Ä¢ ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢'
                        ].join('\n')
                    },
                    activities: {
                        title: '‚≠ê ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©',
                        description: [
                            '**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô**',
                            '‚Ä¢ ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô',
                            '‚Ä¢ ‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                            '‚Ä¢ ‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©\n',
                            '**‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°**',
                            '‚Ä¢ ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏î‡πâ‡∏ß‡∏¢ `/gacha`',
                            '‚Ä¢ ‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™',
                            '‚Ä¢ ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô'
                        ].join('\n')
                    }
                };

                const embed = new EmbedBuilder()
                    .setColor('#4361ee')
                    .setTitle(guides[i.customId].title)
                    .setDescription(guides[i.customId].description);

                await i.reply({ embeds: [embed], ephemeral: true });
            });

        } catch (error) {
            console.error('Error in tutorial command:', error);
            await interaction.editReply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠');
        }
    }
};