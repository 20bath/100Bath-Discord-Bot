const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const achievement = require('../utils/achievementSystem');
const economy = require('../utils/economySystem');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('achievement')
        .setDescription('‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                .setRequired(false)),

    async execute(interaction) {
        try {
            await interaction.deferReply();

            const targetUser = interaction.options.getUser('user') || interaction.user;
            const profile = await economy.getProfile(targetUser.id);

            if (!profile) {
                return interaction.editReply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô');
            }

            const earnedAchievements = profile.achievements || [];
            const stats = await achievement.getAchievementStats(targetUser.id);

            // Create main embed
            const embed = new EmbedBuilder()
                .setTitle(`üèÜ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á ${targetUser.username}`)
                .setThumbnail(targetUser.displayAvatarURL())
                .setColor('#FFD700')
                .setDescription(
                    `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß ${stats.earned} ‡∏à‡∏≤‡∏Å ${stats.total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ` +
                    `(${Math.floor((stats.earned / stats.total) * 100)}%)`
                );

            // Group achievements by category
            const categories = {
                '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': ['first_million', 'high_roller'],
                '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô': ['workaholic', 'master_worker'],
                '‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô': ['lucky_streak', 'gambling_master'],
                '‡∏Å‡∏≤‡∏£‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£': ['savings_master']
            };

            // Add fields for each category
            for (const [category, achievementIds] of Object.entries(categories)) {
                const achievementList = achievementIds.map(id => {
                    const ach = achievement.achievements[id];
                    const isEarned = earnedAchievements.includes(id);
                    return `${isEarned ? ach.icon : 'üîí'} **${ach.name}**\n` +
                           `‚îî ${ach.description}\n` +
                           `‚îî üíé ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${ach.reward?.gems || 0} ‡πÄ‡∏û‡∏ä‡∏£\n` +
                           `‚îî ${isEarned ? '‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö'}`;
                }).join('\n\n');

                embed.addFields({
                    name: `üìë ${category}`,
                    value: achievementList,
                    inline: false
                });
            }

            // Add progress hint for the first locked achievement
            const firstLocked = Object.values(achievement.achievements)
                .find(ach => !earnedAchievements.includes(ach.id));

            if (firstLocked) {
                embed.setFooter({
                    text: `üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏•‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥ "${firstLocked.name}" ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ!`
                });
            }

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in achievement command:', error);
            await interaction.editReply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }
    }
};