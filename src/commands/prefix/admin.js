const {
  PermissionFlagsBits,
  EmbedBuilder,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
} = require("discord.js");
module.exports = (client) => {
  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'click_me') {
      await interaction.reply({
        content: 'üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!'
      });
    }
  });

  client.on("messageCreate", async (message) => {
    if (
      !message.guild ||
      !message.member?.permissions.has(PermissionFlagsBits.Administrator)
    )
      return;

      if (message.content === "!button") {
        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId("click_me")
              .setLabel("Click me")
              .setStyle(ButtonStyle.Primary)
          );
  
        await message.channel.send({
          content: "Click the button below!",
          components: [row],
        });
      }

    // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ
    if (message.content === "!testjoin") {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
      client.emit("guildMemberAdd", message.member);
      message.reply("üîß Testing member join event...");
    }

    if (message.content === "!testleave") {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å
      client.emit("guildMemberRemove", message.member);
      message.reply("üîß Testing member leave event...");
    }

    // !maintenance ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ | ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
    // !maintenance 30 ‡∏ô‡∏≤‡∏ó‡∏µ | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
    if (message.content.startsWith("!maintenance")) {
      try {
        const args = message.content
          .slice("!maintenance".length)
          .trim()
          .split("|");
        const time = args[0]?.trim() || "0 ‡∏ô‡∏≤‡∏ó‡∏µ";
        const reason = args[1]?.trim() || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•";

        const maintenanceEmbed = new EmbedBuilder()
          .setTitle("üõ†Ô∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
          .setColor("#ff0000")
          .setDescription(
            "```diff\n" +
              "- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß\n" +
              "```\n" +
              `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${time}\n` +
              `üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}\n\n` +
              "üôè ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å"
          )
          .setTimestamp()
          .setFooter({
            text: `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢ ${message.author.tag}`,
            iconURL: message.author.displayAvatarURL(),
          });

        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å Channel ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        const announceChannels = [process.env.ANNOUNCE_CHANNEL_ID];

        const sentMessages = [];
        for (const channelId of announceChannels) {
          const channel = client.channels.cache.get(channelId);
          if (channel) {
            const sent = await channel.send({
              content: "@everyone", // Add @everyone mention
              embeds: [maintenanceEmbed],
              allowedMentions: { parse: ["everyone"] }, // Enable @everyone mention
            });
            sentMessages.push(sent);
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        const buttons = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("maintenance_cancel")
            .setLabel("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
            .setStyle("Danger"),
          new ButtonBuilder()
            .setCustomId("maintenance_complete")
            .setLabel("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
            .setStyle("Success")
        );

        // ‡∏™‡πà‡∏á DM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        const controlEmbed = new EmbedBuilder()
          .setTitle("üéÆ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
          .setColor("#0099ff")
          .setDescription(
            "**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á\n" +
              `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á: ${time}\n` +
              `üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}\n\n` +
              "**‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°:**\n" +
              "‚Ä¢ ‡∏Å‡∏î ‚ùå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á\n" +
              "‚Ä¢ ‡∏Å‡∏î ‚úÖ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
          );

        const dm = await message.author.send({
          embeds: [controlEmbed],
          components: [buttons],
        });

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°
        const maintenanceData = {
          announceMessages: sentMessages,
          time: time,
          reason: reason,
          authorId: message.author.id,
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á collector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        const collector = dm.createMessageComponentCollector({
          filter: (i) => i.user.id === message.author.id,
          time: 24 * 60 * 60 * 1000, // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        });

        collector.on("collect", async (i) => {
          if (i.customId === "maintenance_cancel") {
            const cancelEmbed = new EmbedBuilder()
              .setTitle("üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
              .setColor("#ffff00")
              .setDescription(
                "```diff\n" +
                  "+ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\n" +
                  "```\n" +
                  "‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
              )
              .setTimestamp();

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å channel
            for (const msg of maintenanceData.announceMessages) {
              await msg.reply({ embeds: [cancelEmbed] });
            }

            await i.update({
              embeds: [
                controlEmbed.setDescription("**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‚úÖ"),
              ],
              components: [],
            });
          } else if (i.customId === "maintenance_complete") {
            const completeEmbed = new EmbedBuilder()
              .setTitle("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
              .setColor("#00ff00")
              .setDescription(
                "```diff\n" +
                  "+ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n" +
                  "```\n" +
                  "‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
              )
              .setTimestamp();

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å channel
            for (const msg of maintenanceData.announceMessages) {
              await msg.reply({ embeds: [completeEmbed] });
            }

            await i.update({
              embeds: [
                controlEmbed.setDescription(
                  "**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‚úÖ"
                ),
              ],
              components: [],
            });
          }
        });

        message.reply(
          "‚úÖ ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"
        );
      } catch (error) {
        console.error("Error in maintenance command:", error);
        message.reply("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®");
      }
    }

    // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !announce #channel | type | ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ | ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    // !announce #announcements | update | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà | - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£\n- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢\n- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô
    // Add after the maintenance command

    // Update the announce command
    if (message.content.startsWith("!announce")) {
      try {
        // Format: !announce #channel | type | Title | Message
        const args = message.content
          .slice("!announce".length)
          .trim()
          .split("|");
        const channelMention = args[0]?.trim();
        const type = args[1]?.trim().toLowerCase() || "update"; // default to update
        const title = args[2]?.trim() || "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó";
        const content = args[3]?.trim() || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";

        // Get channel ID from mention
        const channelId = channelMention.replace(/<#|>/g, "");
        const channel = message.guild.channels.cache.get(channelId);

        if (!channel) {
          return message.reply(
            "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `!announce #channel | type | ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ | ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`\n" +
              "Types: bug (üî¥), update (üü¢), system (üîµ)"
          );
        }

        // Define announcement types and their properties
        const types = {
          bug: {
            color: "#ff0000",
            emoji: "üêõ",
            prefix: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            diffPrefix: "-",
          },
          update: {
            color: "#00ff00",
            emoji: "üéâ",
            prefix: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà",
            diffPrefix: "+",
          },
          system: {
            color: "#0099ff",
            emoji: "‚öôÔ∏è",
            prefix: "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö",
            diffPrefix: "*",
          },
        };

        // Get announcement type properties
        const announceType = types[type] || types.update;

        const announceEmbed = new EmbedBuilder()
          .setTitle(`${announceType.emoji} ${announceType.prefix}!`)
          .setColor(announceType.color)
          .setDescription(
            "```diff\n" +
              `${announceType.diffPrefix} ${title}\n` +
              "```\n" +
              "üìù **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:**\n" +
              content
          )
          .setTimestamp()
          .setFooter({
            text: `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢ ${message.author.tag}`,
            iconURL: message.author.displayAvatarURL(),
          });

        // Add confirm/cancel buttons with type indication
        const buttons = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("announce_confirm")
            .setLabel(`‚úÖ ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ${announceType.emoji}`)
            .setStyle("Success"),
          new ButtonBuilder()
            .setCustomId("announce_cancel")
            .setLabel("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            .setStyle("Danger")
        );

        // Send preview message with type helper
        const preview = await message.channel.send({
          content: `**üì¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®: ${announceType.prefix}**`,
          embeds: [announceEmbed],
          components: [buttons],
        });

        // Create collector for buttons
        const collector = preview.createMessageComponentCollector({
          filter: (i) => i.user.id === message.author.id,
          time: 60000, // 1 minute
        });

        collector.on("collect", async (i) => {
          if (i.customId === "announce_confirm") {
            // Send announcement to specified channel
            // Send announcement to specified channel with @everyone
            await channel.send({
              content: "@everyone", // Add @everyone mention
              embeds: [announceEmbed],
              allowedMentions: { parse: ["everyone"] }, // Enable @everyone mention
            });
            await i.update({
              content: "‚úÖ ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
              embeds: [announceEmbed],
              components: [],
            });
          } else if (i.customId === "announce_cancel") {
            await i.update({
              content: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®",
              embeds: [],
              components: [],
            });
          }
        });

        collector.on("end", (collected) => {
          if (collected.size === 0) {
            preview.edit({
              content: "‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
              components: [],
            });
          }
        });
      } catch (error) {
        console.error("Error in announce command:", error);
        message.reply(
          "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö\n" +
            "`!announce #channel | type | ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ | ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`\n" +
            "Types: bug (üî¥), update (üü¢), system (üîµ)"
        );
      }
    }

    if (message.content === "!button") {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !button ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î
      const row = new MessageActionRow().addComponents(
        new MessageButton()
          .setCustomId("click_me") // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
          .setLabel("Click me") // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
          .setStyle("PRIMARY") // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
      );

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
      await message.channel.send({
        content: "Click the button below!",
        components: [row],
      });
    }
  });
};
