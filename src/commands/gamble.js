const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const GambleSystem = require('../utils/gambleSystem');
const EconomySystem = require('../utils/economySystem');
const levelSystem = require('../utils/levelSystem');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('gamble')
        .setDescription('‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô')
        .addSubcommand(subcommand =>
            subcommand
                .setName('dice')
                .setDescription('‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥')
                .addIntegerOption(option =>
                    option
                        .setName('bet')
                        .setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô')
                        .setRequired(true)
                        .setMinValue(100)
                )
                .addStringOption(option =>
                    option
                        .setName('choice')
                        .setDescription('‡∏ó‡∏≤‡∏¢‡∏™‡∏π‡∏á(4-6) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡πà‡∏≥(1-3)')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üìà ‡∏™‡∏π‡∏á (4-6)', value: 'high' },
                            { name: 'üìâ ‡∏ï‡πà‡∏≥ (1-3)', value: 'low' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('blackjack')
                .setDescription('‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡πÅ‡∏à‡πá‡∏Ñ')
                .addIntegerOption(option =>
                    option
                        .setName('bet')
                        .setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô')
                        .setRequired(true)
                        .setMinValue(100)
                )
        ),

    async execute(interaction) {
        try {
            const subcommand = interaction.options.getSubcommand();
            const bet = interaction.options.getInteger('bet');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•
            const level = await levelSystem.getLevel(interaction.user.id);
            const base = 5000
            const maxBet = Math.floor(base + (level * 500));

            if (bet > maxBet) {
                return interaction.reply({
                    content: `‚ùå ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${maxBet} ‡∏ö‡∏≤‡∏ó`,
                    flags: ['Ephemeral']
                });
            }

            switch (subcommand) {
                case 'dice': {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
                    const cooldown = await EconomySystem.checkCooldown(interaction.user.id, 'gamble');
                    if (cooldown > 0) {
                        return interaction.reply({
                            content: `‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${Math.ceil(cooldown / 1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`,
                            flags: ['Ephemeral']
                        });
                    }

                    const bet = interaction.options.getInteger('bet');
                    const choice = interaction.options.getString('choice');

                    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
                    const result = await GambleSystem.playDice(interaction.user.id, bet, choice);

                    if (!result.success) {
                        return interaction.reply({
                            content: '‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
                            flags: ['Ephemeral']
                        });
                    }

                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                    const embed = new EmbedBuilder()
                        .setTitle('üé≤ ‡πÑ‡∏Æ‡πÇ‡∏•')
                        .setColor(result.won ? '#00ff00' : '#ff0000')
                        .addFields(
                            {
                                name: 'üé≤ ‡∏ú‡∏•',
                                value: `${getDiceEmoji(result.roll)} (${result.roll})`,
                                inline: true
                            },
                            {
                                name: 'üéØ ‡∏ó‡∏≤‡∏¢',
                                value: choice === 'high' ? 'üìà ‡∏™‡∏π‡∏á (4-6)' : 'üìâ ‡∏ï‡πà‡∏≥ (1-3)',
                                inline: true
                            },
                            {
                                name: 'üí∞ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå',
                                value: result.won ? 'üéâ ‡∏ä‡∏ô‡∏∞!' : 'üò¢ ‡πÅ‡∏û‡πâ',
                                inline: true
                            },
                            {
                                name: result.won ? 'üí∏ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö' : 'üí∏ ‡πÄ‡∏™‡∏µ‡∏¢',
                                value: `${result.won ? result.winAmount : bet} ‡∏ö‡∏≤‡∏ó`,
                                inline: true
                            },
                            {
                                name: 'üíµ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                                value: `${result.newBalance} ‡∏ö‡∏≤‡∏ó`,
                                inline: true
                            }
                        )
                        .setFooter({ text: 'üí° ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢: ‡∏ä‡∏ô‡∏∞ x1.9 ‡πÄ‡∏ó‡πà‡∏≤' })
                        .setTimestamp();

                    // ‡∏ï‡∏±‡πâ‡∏á cooldown 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    await EconomySystem.setCooldown(interaction.user.id, 'gamble', 5000);

                    await interaction.reply({ embeds: [embed] });
                    break;
                }
                case 'blackjack': {
                    const bet = interaction.options.getInteger('bet');
                    const game = await GambleSystem.startBlackjack(interaction.user.id, bet);
                
                    if (!game.success) {
                        return interaction.reply({
                            content: '‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
                            flags: ['Ephemeral']
                        });
                    }
                
                    const row = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('hit')
                                .setLabel('üéØ Hit')
                                .setStyle(ButtonStyle.Primary),
                            new ButtonBuilder()
                                .setCustomId('stand')
                                .setLabel('üõë Stand')
                                .setStyle(ButtonStyle.Danger)
                        );
                
                    const embed = createBlackjackEmbed(game, bet);
                    
                    // Update to use newer method
                    const message = await interaction.reply({
                        embeds: [embed],
                        components: [row]
                    });
                
                    const collector = message.createMessageComponentCollector({
                        filter: i => i.user.id === interaction.user.id,
                        time: 30000
                    });
                
                    collector.on('collect', async i => {
                        try {
                            if (i.customId === 'hit') {
                                const result = await GambleSystem.hitBlackjack(interaction.user.id);
                                
                                // Handle null result
                                if (!result) {
                                    await i.update({
                                        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°',
                                        embeds: [],
                                        components: []
                                    });
                                    collector.stop();
                                    return;
                                }
                
                                if (result.status === 'playing') {
                                    await i.update({
                                        embeds: [createBlackjackEmbed(result, bet)],
                                        components: [row]
                                    });
                                } else {
                                    await i.update({
                                        embeds: [createBlackjackEndEmbed(result)],
                                        components: []
                                    });
                                    collector.stop();
                                }
                            } else if (i.customId === 'stand') {
                                const result = await GambleSystem.standBlackjack(interaction.user.id);
                                
                                // Handle null result
                                if (!result) {
                                    await i.update({
                                        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°',
                                        embeds: [],
                                        components: []
                                    });
                                    collector.stop();
                                    return;
                                }
                
                                await i.update({
                                    embeds: [createBlackjackEndEmbed(result)],
                                    components: []
                                });
                                collector.stop();
                            }
                        } catch (error) {
                            console.error('Error in blackjack interaction:', error);
                            await i.update({
                                content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°',
                                embeds: [],
                                components: []
                            }).catch(console.error);
                            collector.stop();
                        }
                    });
                
                    collector.on('end', () => {
                        // Clean up the message when the collector ends
                        if (message) {
                            interaction.editReply({
                                components: []
                            }).catch(console.error);
                        }
                    });
                
                    break;
                }
            }
        } catch (error) {
            console.error('Error in gamble command:', error);
            await interaction.reply({
                content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                flags: ['Ephemeral']
            });
        }
    }
};

// Helper function for dice emojis
function getDiceEmoji(number) {
    try {
    const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
    return diceEmojis[number - 1];
    } catch (error) {
        console.error('Error in getDiceEmoji:', error);
    }
}

function createBlackjackEmbed(game, bet) {
    try {
    return new EmbedBuilder()
        .setTitle('üÉè Blackjack')
        .setColor('#0099ff')
        .addFields(
            {
                name: 'üéÆ ‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                value: GambleSystem.formatHand(game.playerHand) + ` (${game.playerTotal})`,
                inline: true
            },
            {
                name: 'üé∞ ‡πÑ‡∏û‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠',
                value: GambleSystem.formatHand(game.dealerHand, true),
                inline: true
            },
            {
                name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
                value: `${bet} ‡∏ö‡∏≤‡∏ó`,
                inline: true
            }
        )
        .setFooter({ text: 'üí° Hit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡πà‡∏ß‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°, Stand ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î' });
    } catch (error) {
        console.error('Error in createBlackjackEmbed:', error);
    }
}

function createBlackjackEndEmbed(result) {
    try {
    const getStatusText = (status) => {
        switch (status) {
            case 'blackjack': return 'üéâ ‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡πÅ‡∏à‡πá‡∏Ñ!';
            case 'win': return 'üéâ ‡∏ä‡∏ô‡∏∞!';
            case 'lose': return 'üò¢ ‡πÅ‡∏û‡πâ';
            case 'bust': return 'üí• ‡πÄ‡∏Å‡∏¥‡∏ô 21!';
            case 'push': return 'ü§ù ‡πÄ‡∏™‡∏°‡∏≠';
            default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ú‡∏•';
        }
    };

    return new EmbedBuilder()
        .setTitle('üÉè Blackjack - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô')
        .setColor(result.won ? '#00ff00' : '#ff0000')
        .addFields(
            {
                name: 'üéÆ ‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                value: GambleSystem.formatHand(result.playerHand) + ` (${result.playerTotal})`,
                inline: true
            },
            {
                name: 'üé∞ ‡πÑ‡∏û‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠',
                value: GambleSystem.formatHand(result.dealerHand) + ` (${result.dealerTotal})`,
                inline: true
            },
            {
                name: 'üí∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô',
                value: getStatusText(result.status),
                inline: false
            },
            {
                name: result.won ? 'üí∏ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö' : 'üí∏ ‡πÄ‡∏™‡∏µ‡∏¢',
                value: `${result.won ? result.winAmount : result.bet} ‡∏ö‡∏≤‡∏ó`,
                inline: true
            },
            {
                name: 'üíµ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                value: `${result.newBalance} ‡∏ö‡∏≤‡∏ó`,
                inline: true
            }
        )
        .setFooter({ text: 'üí° Blackjack ‡∏à‡πà‡∏≤‡∏¢ 2.5 ‡πÄ‡∏ó‡πà‡∏≤, ‡∏ä‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡πà‡∏≤‡∏¢ 2 ‡πÄ‡∏ó‡πà‡∏≤' });
    } catch (error) {
        console.error('Error in createBlackjackEndEmbed:', error);
    }
}