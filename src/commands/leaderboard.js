const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { db } = require('../config/firebase');
const { getRequiredXP } = require('../utils/levelSystem');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('leaderboard')
        .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å')
        .addStringOption(option =>
            option
                .setName('type')
                .setDescription('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•')
                .addChoices(
                    { name: 'üéÆ ‡πÄ‡∏•‡πÄ‡∏ß‡∏•', value: 'level' },
                    { name: '‚≠ê XP', value: 'xp' }
                )
                .setRequired(false)
        ),

    async execute(interaction) {
        await interaction.deferReply();

        try {
            const type = interaction.options.getString('type') || 'level';
            const guild = interaction.guild;

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô guild ‡∏ô‡∏µ‡πâ
            const usersRef = db.collection('users');
            const snapshot = await usersRef.get();

            let leaderboardData = [];

           
            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            for (const doc of snapshot.docs) {
                const data = doc.data();
                    try {
                        const member = await guild.members.fetch(doc.id);
                        if (member) {
                            leaderboardData.push({
                                id: doc.id,
                                username: member.user.username,
                                level: data.level || 1,
                                xp: data.xp || 0
                            });
                        }
                    } catch (error) {
                        console.error(`Cannot fetch member ${doc.id}:`, error);
                    }
                
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            leaderboardData.sort((a, b) => {
                if (type === 'level') {
                    if (b.level === a.level) {
                        return b.xp - a.xp;
                    }
                    return b.level - a.level;
                }
                return b.xp - a.xp;
            });

            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            leaderboardData = leaderboardData.slice(0, 10);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
            const embed = new EmbedBuilder()
                .setTitle(`üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î - ${type === 'level' ? '‡πÄ‡∏•‡πÄ‡∏ß‡∏•' : 'XP'}`)
                .setColor('#FFD700')
                .setDescription('10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå')
                .setThumbnail(interaction.guild.iconURL({ dynamic: true }));

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            const fields = leaderboardData.map((user, index) => {
                const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `${index + 1}.`;
                const requiredXP = getRequiredXP(user.level);
                const progress = type === 'level' 
                    ? `[${user.xp}/${requiredXP} XP]`
                    : `(Level ${user.level})`;

                return {
                    name: `${medal} ${user.username}`,
                    value: type === 'level'
                        ? `Level ${user.level} ${progress}`
                        : `${user.xp} XP ${progress}`,
                    inline: false
                };
            });

            if (fields.length === 0) {
                embed.setDescription('‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
            } else {
                embed.addFields(fields);
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            const userPosition = leaderboardData.findIndex(user => user.id === interaction.user.id);
            if (userPosition === -1) {
                embed.setFooter({ 
                    text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' 
                });
            } else {
                embed.setFooter({ 
                    text: `üéØ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: #${userPosition + 1}` 
                });
            }

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in leaderboard command:', error);
            await interaction.editReply({
                content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö',
                ephemeral: true
            });
        }
    },
};