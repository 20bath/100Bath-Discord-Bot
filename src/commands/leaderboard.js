const { EmbedBuilder } = require('discord.js');
const ExpSystem = require('../utils/expSystem');

module.exports = {
    name: 'leaderboard',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
    requiresDatabase: true,
    async execute(interaction) {
        // ‡∏•‡∏ö deferReply ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ defer ‡πÉ‡∏ô index.js ‡πÅ‡∏•‡πâ‡∏ß
        try {
            const leaderboard = await ExpSystem.getLeaderboard(interaction.guild.id);
            
            if (!leaderboard.length) {
                return await interaction.editReply('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ');
            }

            let description = '';
            let rank = 1;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
            for (const data of leaderboard) {
                const user = await interaction.client.users.fetch(data.userId);
                const nextLevelExp = ExpSystem.expNeeded(data.level + 1);
                const progress = ((data.exp / nextLevelExp) * 100).toFixed(1);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° emoji ‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
                let rankEmoji = rank === 1 ? 'üëë' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : 'üèÖ';
                
                description += `${rankEmoji} **‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ${rank}.** ${user}\n`;
                description += `‚îó Level: ${data.level} ‚Ä¢ EXP: ${data.exp}/${nextLevelExp} (${progress}%)\n\n`;
                rank++;
            }

            const embed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle(`üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á ${interaction.guild.name}`)
                .setDescription(description)
                .setThumbnail(interaction.guild.iconURL({ dynamic: true }))
                .setFooter({ 
                    text: `‡∏Ç‡∏≠‡∏î‡∏π‡πÇ‡∏î‡∏¢ ${interaction.user.username}`,
                    iconURL: interaction.user.displayAvatarURL()
                })
                .setTimestamp();

            return await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            console.error('Error in leaderboard command:', error);
            return await interaction.editReply({
                content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö',
                ephemeral: true
            }).catch(console.error);
        }
    }
};