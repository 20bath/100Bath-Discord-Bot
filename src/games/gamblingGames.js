const { EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, Modal, TextInputComponent } = require('discord.js');

class GamblingGames {
    // Blackjack
    static async playBlackjack(interaction, bet) {
        try {
            const deck = this.createDeck();
            const playerHand = [this.drawCard(deck), this.drawCard(deck)];
            const dealerHand = [this.drawCard(deck), this.drawCard(deck)];
            let playerTotal = this.calculateHand(playerHand);

            const embed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('üé≤ Blackjack')
                .addFields(
                    { name: 'üé≠ ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠', value: `${dealerHand[0]} | ?`, inline: true },
                    { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', value: `${playerHand.join(' | ')} (${playerTotal})`, inline: true },
                    { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                );

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('hit')
                        .setLabel('‡∏à‡∏±‡πà‡∏ß‡πÑ‡∏û‡πà')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üéØ'),
                    new ButtonBuilder()
                        .setCustomId('stand')
                        .setLabel('‡∏´‡∏¢‡∏∏‡∏î')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚èπÔ∏è')
                );

            const message = await interaction.editReply({ 
                embeds: [embed], 
                components: [row] 
            });

            return new Promise(async (resolve) => {
                const filter = i => i.user.id === interaction.user.id;
                const collector = message.createMessageComponentCollector({ 
                    filter, 
                    time: 30000 
                });

                collector.on('collect', async (i) => {
                    try {
                        if (i.customId === 'hit') {
                            const newCard = this.drawCard(deck);
                            if (!newCard) {
                                collector.stop('nodeck');
                                return;
                            }
                            playerHand.push(newCard);
                            playerTotal = this.calculateHand(playerHand);

                            if (playerTotal > 21) {
                                collector.stop('bust');
                            } else {
                                embed.setFields(
                                    { name: 'üé≠ ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠', value: `${dealerHand[0]} | ?`, inline: true },
                                    { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', value: `${playerHand.join(' | ')} (${playerTotal})`, inline: true },
                                    { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                                );
                                await i.update({ embeds: [embed], components: [row] });
                            }
                        } else if (i.customId === 'stand') {
                            collector.stop('stand');
                        }
                    } catch (error) {
                        console.error('Error in collector:', error);
                        collector.stop('error');
                    }
                });

                collector.on('end', async (collected, reason) => {
                    try {
                        let dealerTotal = this.calculateHand(dealerHand);
                        
                        // ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠‡∏à‡∏±‡πà‡∏ß‡πÑ‡∏û‡πà‡∏ñ‡πâ‡∏≤‡πÅ‡∏ï‡πâ‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 17
                        if (reason === 'stand') {
                            while (dealerTotal < 17) {
                                const newCard = this.drawCard(deck);
                                if (!newCard) break;
                                dealerHand.push(newCard);
                                dealerTotal = this.calculateHand(dealerHand);
                            }
                        }

                        let result;
                        if (reason === 'bust' || playerTotal > 21) {
                            result = { won: false, amount: -bet };
                        } else if (reason === 'nodeck' || reason === 'error') {
                            result = { won: false, amount: 0 }; // ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
                        } else if (dealerTotal > 21 || playerTotal > dealerTotal) {
                            result = { won: true, amount: bet * 2 };
                        } else if (playerTotal < dealerTotal) {
                            result = { won: false, amount: -bet };
                        } else {
                            result = { won: false, amount: 0 }; // ‡πÄ‡∏™‡∏°‡∏≠
                        }

                        embed
                            .setFields(
                                { name: 'üé≠ ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠', value: `${dealerHand.join(' | ')} (${dealerTotal})`, inline: true },
                                { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', value: `${playerHand.join(' | ')} (${playerTotal})`, inline: true },
                                { name: 'üí∞ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: result.won ? `‡∏ä‡∏ô‡∏∞ ${result.amount} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç` : 
                                                          result.amount === 0 ? '‡πÄ‡∏™‡∏°‡∏≠' : 
                                                          `‡πÅ‡∏û‡πâ ${Math.abs(result.amount)} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                            )
                            .setColor(result.won ? '#00ff00' : result.amount === 0 ? '#ffff00' : '#ff0000');

                        await interaction.editReply({ 
                            embeds: [embed], 
                            components: [] 
                        });
                        
                        resolve(result);
                    } catch (error) {
                        console.error('Error in end collector:', error);
                        resolve({ won: false, amount: 0 });
                    }
                });
            });
        } catch (error) {
            console.error('Error in blackjack:', error);
            return { won: false, amount: 0 };
        }
    }

    // Coinflip
    static async playCoinflip(interaction, bet) {
        const choices = ['heads', 'tails'];
        const playerChoice = choices[Math.floor(Math.random() * choices.length)];
        const result = choices[Math.floor(Math.random() * choices.length)];
        const won = playerChoice === result;

        const embed = new EmbedBuilder()
            .setColor(won ? '#00ff00' : '#ff0000')
            .setTitle('üé≤ Coinflip')
            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${playerChoice === 'heads' ? '‡∏´‡∏±‡∏ß ü™ô' : '‡∏Å‡πâ‡∏≠‡∏¢ üí´'}\n` +
                          `‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: ${result === 'heads' ? '‡∏´‡∏±‡∏ß ü™ô' : '‡∏Å‡πâ‡∏≠‡∏¢ üí´'}`)
            .addFields(
                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                { name: 'üí∏ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: won ? `‡∏ä‡∏ô‡∏∞ +${bet * 2}` : `‡πÅ‡∏û‡πâ -${bet}`, inline: true }
            );

        await interaction.editReply({ embeds: [embed] });
        return { won, amount: won ? bet * 2 : -bet };
    }

    // Slots
    static async playSlots(interaction, bet) {
        const symbols = ['7Ô∏è‚É£', 'üíé', 'üçí', 'üçä', 'üçá', 'üçé'];
        const slots = Array(3).fill().map(() => symbols[Math.floor(Math.random() * symbols.length)]);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û slot machine
        const slotsDisplay = 
            `‚ïî‚ïê‚ïê‚ï¶‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïó\n` +
            `‚ïë${slots[0]}‚ïë${slots[1]}‚ïë${slots[2]}‚ïë\n` +
            `‚ïö‚ïê‚ïê‚ï©‚ïê‚ïê‚ï©‚ïê‚ïê‚ïù`;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
        let winMultiplier = 0;
        if (slots[0] === slots[1] && slots[1] === slots[2]) {
            // ‡πÑ‡∏î‡πâ‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            winMultiplier = slots[0] === '7Ô∏è‚É£' ? 10 : // 777 = x10
                          slots[0] === 'üíé' ? 7 :  // üíéüíéüíé = x7
                          5; // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ = x5
        } else if (slots[0] === slots[1] || slots[1] === slots[2]) {
            // ‡πÑ‡∏î‡πâ 2 ‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
            winMultiplier = 2;
        }

        const winAmount = bet * winMultiplier;
        const won = winAmount > 0;

        const embed = new EmbedBuilder()
            .setColor(won ? '#00ff00' : '#ff0000')
            .setTitle('üé∞ Slots')
            .setDescription(`${slotsDisplay}`)
            .addFields(
                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                { name: 'üí∏ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: won ? `‡∏ä‡∏ô‡∏∞ +${winAmount}` : `‡πÅ‡∏û‡πâ -${bet}`, inline: true }
            );

        await interaction.editReply({ embeds: [embed] });
        return { won, amount: won ? winAmount : -bet };
    }

    // Dice
    static async playDice(interaction, bet) {
        const playerRoll = Math.floor(Math.random() * 6) + 1;
        const botRoll = Math.floor(Math.random() * 6) + 1;
        const won = playerRoll > botRoll;

        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        const embed = new EmbedBuilder()
            .setColor(won ? '#00ff00' : playerRoll === botRoll ? '#ffff00' : '#ff0000')
            .setTitle('üé≤ Dice')
            .setDescription(
                `‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ: ${diceEmojis[playerRoll-1]} (${playerRoll})\n` +
                `‡∏ö‡∏≠‡∏ó‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ: ${diceEmojis[botRoll-1]} (${botRoll})`
            )
            .addFields(
                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                { name: 'üí∏ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: playerRoll === botRoll ? '‡πÄ‡∏™‡∏°‡∏≠' : 
                    won ? `‡∏ä‡∏ô‡∏∞ +${bet * 2}` : `‡πÅ‡∏û‡πâ -${bet}`, inline: true }
            );

        await interaction.editReply({ embeds: [embed] });
        return { 
            won, 
            amount: playerRoll === botRoll ? 0 : won ? bet * 2 : -bet 
        };
    }

    // Rock Paper Scissors
    static async playRPS(interaction, bet) {
        const choices = ['ü™®', 'üìÑ', '‚úÇÔ∏è'];
        const buttons = choices.map(choice => 
            new ButtonBuilder()
                .setCustomId(choice)
                .setEmoji(choice)
                .setStyle(ButtonStyle.Primary)
        );

        const row = new ActionRowBuilder().addComponents(buttons);
        const embed = new EmbedBuilder()
            .setTitle('‚úÇÔ∏è Rock Paper Scissors')
            .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!');

        const message = await interaction.editReply({
            embeds: [embed],
            components: [row]
        });

        try {
            const response = await message.awaitMessageComponent({
                filter: i => i.user.id === interaction.user.id,
                time: 30000
            });

            const playerChoice = response.customId;
            const botChoice = choices[Math.floor(Math.random() * choices.length)];

            let won = false;
            if ((playerChoice === 'ü™®' && botChoice === '‚úÇÔ∏è') ||
                (playerChoice === 'üìÑ' && botChoice === 'ü™®') ||
                (playerChoice === '‚úÇÔ∏è' && botChoice === 'üìÑ')) {
                won = true;
            }

            const resultEmbed = new EmbedBuilder()
                .setColor(playerChoice === botChoice ? '#ffff00' : won ? '#00ff00' : '#ff0000')
                .setTitle('‚úÇÔ∏è Rock Paper Scissors')
                .setDescription(
                    `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${playerChoice}\n` +
                    `‡∏ö‡∏≠‡∏ó‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${botChoice}`
                )
                .addFields(
                    { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                    { name: 'üí∏ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: playerChoice === botChoice ? '‡πÄ‡∏™‡∏°‡∏≠' : 
                        won ? `‡∏ä‡∏ô‡∏∞ +${bet * 2}` : `‡πÅ‡∏û‡πâ -${bet}`, inline: true }
                );

            await response.update({ embeds: [resultEmbed], components: [] });
            return {
                won,
                amount: playerChoice === botChoice ? 0 : won ? bet * 2 : -bet
            };
        } catch (e) {
            const timeoutEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')
                .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');

            await interaction.editReply({
                embeds: [timeoutEmbed],
                components: []
            });
            return { won: false, amount: -bet };
        }
    }

    static createDeck() {
        const suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô£Ô∏è', '‚ô¶Ô∏è'];
        const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        const deck = [];

        for (const suit of suits) {
            for (const value of values) {
                deck.push(`${value}${suit}`);
            }
        }

        return this.shuffleDeck(deck);
    }

    static shuffleDeck(deck) {
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
        return deck;
    }

    static drawCard(deck) {
        return deck.pop();
    }

    static calculateHand(hand) {
        let total = 0;
        let aces = 0;

        for (const card of hand) {
            const value = card.slice(0, -2); // ‡∏ï‡∏±‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÑ‡∏û‡πà‡∏≠‡∏≠‡∏Å
            if (value === 'A') {
                aces++;
            } else if (['K', 'Q', 'J'].includes(value)) {
                total += 10;
            } else {
                total += parseInt(value);
            }
        }

        for (let i = 0; i < aces; i++) {
            if (total + 11 <= 21) {
                total += 11;
            } else {
                total += 1;
            }
        }

        return total;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...

    // Number Guess
    // ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô playNumberGuess ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Modal

static async playNumberGuess(interaction, bet) {
    const target = Math.floor(Math.random() * 100) + 1;
    const maxTries = 5;
    let tries = 0;

    const embed = new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle('üî¢ Number Guess')
        .setDescription('‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-100\n‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢')
        .addFields(
            { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
            { name: '‚ùì ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠', value: `${maxTries - tries}`, inline: true }
        );

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('guess_1')
                .setLabel('1-25')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('guess_2')
                .setLabel('26-50')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('guess_3')
                .setLabel('51-75')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('guess_4')
                .setLabel('76-100')
                .setStyle(ButtonStyle.Primary)
        );

    const message = await interaction.editReply({
        embeds: [embed],
        components: [row]
    });

    try {
        while (tries < maxTries) {
            const buttonResponse = await message.awaitMessageComponent({
                filter: i => i.user.id === interaction.user.id,
                time: 30000
            });

            // ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            const range = buttonResponse.customId.split('_')[1];
            const min = (range - 1) * 25 + 1;
            const max = range * 25;

            const numberRow = new ActionRowBuilder()
                .addComponents(
                    Array.from({ length: 5 }, (_, i) => {
                        const num = min + i * 5;
                        return new ButtonBuilder()
                            .setCustomId(`num_${num}`)
                            .setLabel(`${num}-${num + 4}`)
                            .setStyle(ButtonStyle.Secondary);
                    })
                );

            await buttonResponse.update({
                embeds: [embed],
                components: [row, numberRow]
            });

            const numberResponse = await message.awaitMessageComponent({
                filter: i => i.user.id === interaction.user.id,
                time: 30000
            });

            const baseNumber = parseInt(numberResponse.customId.split('_')[1]);
            const finalRow = new ActionRowBuilder()
                .addComponents(
                    Array.from({ length: 5 }, (_, i) => {
                        return new ButtonBuilder()
                            .setCustomId(`final_${baseNumber + i}`)
                            .setLabel(`${baseNumber + i}`)
                            .setStyle(ButtonStyle.Secondary);
                    })
                );

            await numberResponse.update({
                embeds: [embed],
                components: [row, finalRow]
            });

            const finalResponse = await message.awaitMessageComponent({
                filter: i => i.user.id === interaction.user.id,
                time: 30000
            });

            const guess = parseInt(finalResponse.customId.split('_')[1]);
            tries++;

            if (guess === target) {
                const winMultiplier = Math.max(6 - tries, 1);
                const winAmount = bet * winMultiplier;
                
                embed
                    .setColor('#00ff00')
                    .setDescription(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠: ${target}`)
                    .setFields(
                        { name: 'üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏¢', value: `${tries}`, inline: true },
                        { name: 'üí∞ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', value: `${winAmount} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                    );

                await finalResponse.update({ embeds: [embed], components: [] });
                return { won: true, amount: winAmount };
            } else {
                const hint = guess < target ? '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚¨ÜÔ∏è' : '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚¨áÔ∏è';
                embed
                    .setDescription(`‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å! ${hint}\n‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${maxTries - tries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
                    .setFields(
                        { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                        { name: '‚ùì ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠', value: `${maxTries - tries}`, inline: true },
                        { name: 'üéØ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏¢', value: `${guess}`, inline: true }
                    );

                if (tries < maxTries) {
                    await finalResponse.update({ embeds: [embed], components: [row] });
                } else {
                    embed
                        .setColor('#ff0000')
                        .setDescription(`üò¢ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏´‡∏°‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠: ${target}`);
                    await finalResponse.update({ embeds: [embed], components: [] });
                }
            }
        }

        return { won: false, amount: -bet };
    } catch (e) {
        const timeoutEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')
            .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
            
        await interaction.editReply({
            embeds: [timeoutEmbed],
            components: []
        });
        return { won: false, amount: -bet };
    }
}

    // Dart Throw
    static async playDartThrow(interaction, bet) {
        const zones = [
            { name: 'Bull\'s Eye üéØ', multiplier: 10, chance: 0.05 },
            { name: 'Triple Ring üî¥', multiplier: 5, chance: 0.15 },
            { name: 'Double Ring üîµ', multiplier: 3, chance: 0.25 },
            { name: 'Outer Ring ‚ö™', multiplier: 2, chance: 0.35 },
            { name: 'Miss ‚ùå', multiplier: 0, chance: 0.20 }
        ];

        const button = new ButtonBuilder()
            .setCustomId('throw')
            .setLabel('üéØ ‡∏Ç‡∏ß‡πâ‡∏≤‡∏á‡∏î‡∏≠‡∏Å‡∏ò‡∏ô‡∏π')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(button);

        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üéØ Dart Throw')
            .setDescription('‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏ß‡πâ‡∏≤‡∏á‡∏î‡∏≠‡∏Å‡∏ò‡∏ô‡∏π')
            .addFields(
                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                { name: 'üí∞ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', value: 
                    zones.map(z => `${z.name}: x${z.multiplier}`).join('\n'), 
                    inline: true 
                }
            );

        const message = await interaction.editReply({
            embeds: [embed],
            components: [row]
        });

        try {
            const response = await message.awaitMessageComponent({
                filter: i => i.user.id === interaction.user.id,
                time: 30000
            });

            // ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å
            const random = Math.random();
            let cumulativeChance = 0;
            let hitZone;

            for (const zone of zones) {
                cumulativeChance += zone.chance;
                if (random <= cumulativeChance) {
                    hitZone = zone;
                    break;
                }
            }

            const winAmount = bet * hitZone.multiplier;
            const won = hitZone.multiplier > 0;

            const resultEmbed = new EmbedBuilder()
                .setColor(won ? '#00ff00' : '#ff0000')
                .setTitle('üéØ Dart Throw')
                .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏ß‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏ô: ${hitZone.name}!`)
                .addFields(
                    { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                    { name: 'üí∏ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: won ? 
                        `‡∏ä‡∏ô‡∏∞ ${winAmount} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (x${hitZone.multiplier})` : 
                        '‡πÅ‡∏û‡πâ!', inline: true }
                );

            await response.update({
                embeds: [resultEmbed],
                components: []
            });

            return { won, amount: won ? winAmount : -bet };

        } catch (e) {
            const timeoutEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')
                .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');

            await interaction.editReply({
                embeds: [timeoutEmbed],
                components: []
            });
            return { won: false, amount: -bet };
        }
    }

    // Minesweeper
    static async playMinesweeper(interaction, bet) {
        const GRID_SIZE = 5;
        const MINE_COUNT = 5;
        const MAX_MOVES = 5;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î
        const grid = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(false));
        let minesPlaced = 0;
        
        // ‡∏ß‡∏≤‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
        while (minesPlaced < MINE_COUNT) {
            const x = Math.floor(Math.random() * GRID_SIZE);
            const y = Math.floor(Math.random() * GRID_SIZE);
            if (!grid[y][x]) {
                grid[y][x] = true;
                minesPlaced++;
            }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
        function createButtons(revealed) {
            const rows = [];
            for (let y = 0; y < GRID_SIZE; y++) {
                const row = new ActionRowBuilder();
                for (let x = 0; x < GRID_SIZE; x++) {
                    const button = new ButtonBuilder()
                        .setCustomId(`${x}_${y}`)
                        .setLabel(revealed[y][x] ? (grid[y][x] ? 'üí£' : '‚úÖ') : '?')
                        .setStyle(
                            revealed[y][x] ? 
                                (grid[y][x] ? ButtonStyle.Danger : ButtonStyle.Success) : 
                                ButtonStyle.Secondary
                        )
                        .setDisabled(revealed[y][x]);
                    row.addComponents(button);
                }
                rows.push(row);
            }
            return rows;
        }

        const revealed = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(false));
        let moves = 0;
        let totalWin = 0;

        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üí£ Minesweeper')
            .setDescription(
                '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n' +
                `üí£ ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î: ${MINE_COUNT} ‡∏•‡∏π‡∏Å\n` +
                `üéØ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${MAX_MOVES - moves} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
            )
            .addFields(
                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                { name: 'üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', value: `${totalWin} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
            );

        const message = await interaction.editReply({
            embeds: [embed],
            components: createButtons(revealed)
        });

        try {
            while (moves < MAX_MOVES) {
                const response = await message.awaitMessageComponent({
                    filter: i => i.user.id === interaction.user.id,
                    time: 30000
                });

                const [x, y] = response.customId.split('_').map(Number);
                revealed[y][x] = true;
                moves++;

                if (grid[y][x]) {
                    // ‡πÄ‡∏à‡∏≠‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
                    const loseEmbed = new EmbedBuilder()
                        .setColor('#ff0000')
                        .setTitle('üí• BOOM!')
                        .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏à‡∏≠‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î!')
                        .addFields(
                            { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                            { name: 'üí∏ ‡πÅ‡∏û‡πâ', value: `-${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                        );

                    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á
                    for (let y = 0; y < GRID_SIZE; y++) {
                        for (let x = 0; x < GRID_SIZE; x++) {
                            revealed[y][x] = true;
                        }
                    }

                    await response.update({
                        embeds: [loseEmbed],
                        components: createButtons(revealed)
                    });

                    return { won: false, amount: -bet };
                } else {
                    // ‡∏£‡∏≠‡∏î
                    totalWin += bet * 0.5; // ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• 50% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î

                    embed
                        .setDescription(
                            '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n' +
                            `üí£ ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î: ${MINE_COUNT} ‡∏•‡∏π‡∏Å\n` +
                            `üéØ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${MAX_MOVES - moves} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                        )
                        .setFields(
                            { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                            { name: 'üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', value: `${totalWin} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                        );

                    if (moves === MAX_MOVES) {
                        // ‡∏ä‡∏ô‡∏∞ - ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                        const winEmbed = new EmbedBuilder()
                            .setColor('#00ff00')
                            .setTitle('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!')
                            .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!')
                            .addFields(
                                { name: 'üí∞ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', value: `${bet} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                                { name: 'üí∏ ‡∏ä‡∏ô‡∏∞', value: `+${totalWin} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true }
                            );

                        await response.update({
                            embeds: [winEmbed],
                            components: createButtons(revealed)
                        });

                        return { won: true, amount: totalWin };
                    }

                    await response.update({
                        embeds: [embed],
                        components: createButtons(revealed)
                    });
                }
            }
        } catch (e) {
            const timeoutEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')
                .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');

            await interaction.editReply({
                embeds: [timeoutEmbed],
                components: []
            });
            return { won: false, amount: -bet };
        }
    }
}

module.exports = GamblingGames;