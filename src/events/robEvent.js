const { EmbedBuilder } = require("discord.js");
const { activeRobs, ROB_CONFIG, checkRobberyCard } = require("../utils/robSystem");
const EconomySystem = require("../utils/economySystem");

module.exports = (client) => {
  client.on("interactionCreate", async (interaction) => {
    try {
      if (!interaction.isButton()) return;

      const customId = interaction.customId;
      if (!customId.startsWith("block_rob_")) return;

      const targetId = customId.split("_").pop();

      // Add debug logging
      console.log('Active robs:', activeRobs);
      console.log('Target ID:', targetId);

      const robEvent = activeRobs.get(targetId);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
      if (!robEvent) {
        return interaction.reply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ",
          ephemeral: true,
        });
      }

      // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏à‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (interaction.user.id === robEvent.robberId) {
        return interaction.reply({
          content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
          ephemeral: true,
        });
      }

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å activeRobs
      clearTimeout(robEvent.timeout);
      if (robEvent.mainTimeout) {
          clearTimeout(robEvent.mainTimeout);
      }
      activeRobs.delete(targetId);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
      const fine = Math.floor(
        Math.random() *
          (ROB_CONFIG.FINE_SYSTEM.BLOCK.MAX -
            ROB_CONFIG.FINE_SYSTEM.BLOCK.MIN +
            1) +
          ROB_CONFIG.FINE_SYSTEM.BLOCK.MIN
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
      const embed = new EmbedBuilder()
        .setTitle("üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á!")
        .setColor("#1E90FF")
        .setDescription(
          `
        ‚ú® **${interaction.user.username}** ‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
        
        üëÆ **‡∏ö‡∏ó‡∏•‡∏á‡πÇ‡∏ó‡∏©**
        ‡πÇ‡∏à‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô **${fine.toLocaleString()}** ‡∏ö‡∏≤‡∏ó
        
        ‚öñÔ∏è **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ!**
      `
        )
        .setTimestamp();

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
      await interaction.update({
        embeds: [embed],
        components: [],
        content: "üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!",
      });

      // ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏à‡∏£
      await EconomySystem.addMoney(robEvent.robberId, -fine);

      // Inside the interaction handler:

      const defenderProfile = await EconomySystem.getProfile(interaction.user.id);
      const targetProfile = await EconomySystem.getProfile(targetId);
      const robberProfile = await EconomySystem.getProfile(robEvent.robberId);

      // Update defender stats
      await EconomySystem.updateProfile(interaction.user.id, {
          'stats.robStats.asDefender.blocksAttempted': defenderProfile.stats.robStats.asDefender.blocksAttempted + 1,
          'stats.robStats.asDefender.blocksSuccessful': defenderProfile.stats.robStats.asDefender.blocksSuccessful + 1,
          'stats.robStats.asDefender.peopleSaved': defenderProfile.stats.robStats.asDefender.peopleSaved + 1,
          'stats.robStats.asDefender.moneySaved': defenderProfile.stats.robStats.asDefender.moneySaved + Math.floor(targetProfile.balance * (ROB_CONFIG.MAX_STEAL_PERCENT / 100))
      });

      // Update victim saved stats
      await EconomySystem.updateProfile(targetId, {
          'stats.robStats.asVictim.timesSaved': targetProfile.stats.robStats.asVictim.timesSaved + 1
      });

      // Update robber blocked stats
      await EconomySystem.updateProfile(robEvent.robberId, {
          'stats.robStats.asRobber.blocked': robberProfile.stats.robStats.asRobber.blocked + 1
      });

      // ‡∏™‡πà‡∏á DM ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏à‡∏£
      try {
        const robber = await client.users.fetch(robEvent.robberId);
        await robber.send({
          embeds: [
            new EmbedBuilder()
              .setColor("#ff0000")
              .setTitle("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á!")
              .setDescription(
                `**${
                  interaction.user.username
                }** ‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!\n‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö **${fine.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`
              )
              .setTimestamp(),
          ],
        });
      } catch (error) {
        console.error("Cannot send DM to robber:", error);
      }
    } catch (error) {
      console.error("Error in rob block event:", error);
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô",
          ephemeral: true,
        });
      }
    }
  });
};
