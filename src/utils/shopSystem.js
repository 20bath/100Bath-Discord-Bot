const { Collection } = require("discord.js");
const economy = require("./economySystem");

class ShopSystem {
  constructor() {
    this.items = {
      // ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏≤‡∏ß‡∏£
      permanent: {
        work_badge: {
          id: "work_badge",
          name: "üíº ‡πÄ‡∏ô‡πá‡∏Å‡πÑ‡∏ó‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 5%",
          price: 150000,
          type: "permanent",
          effect: { work_bonus: 0.05 },
        },
        illegal_guns: {
          id: "illegal_guns",
          name: "üî´ ‡∏õ‡∏∑‡∏ô‡πÄ‡∏ñ‡∏∑‡πà‡∏≠‡∏ô",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô 10%",
          price: 250000,
          type: "permanent",
          effect: { success_rob_rate: 0.1 },
        },
        pig_bank: {
          id: "pig_bank",
          name: "üê∑ ‡∏Å‡∏£‡∏∞‡∏õ‡∏∏‡∏Å‡∏´‡∏°‡∏π‡πÄ‡∏î‡πâ‡∏á",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ 50000 ‡∏ö‡∏≤‡∏ó",
          price: 250000,
          type: "permanent",
          effect: { bank_balance: 50000 },
        },
      },
      // ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      temporary: {
        xp_boost: {
          id: "xp_boost",
          name: "üìö ‡∏≠‡πà‡∏≤‡∏ô TCAS ",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏° EXP 10% (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
          price: 5000,
          duration: 7200000, // 24 hours
          type: "temporary",
          effect: { xp_boost: 0.1 },
        },
        money_boost: {
          id: "money_boost",
          name: "üí∞ ‡πÑ‡∏•‡∏ü‡πå‡∏™‡∏î Tiktok",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 10% (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
          price: 7500,
          duration: 7200000, // 12 hours
          type: "temporary",
          effect: { money_boost: 0.1 },
        },
        makeshift_gun: {
          id: "makeshift_gun",
          name: "üî´ ‡∏õ‡∏∑‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô 3% (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
          price: 12000,
          duration: 7200000, // 2 hours
          type: "temporary",
          effect: { success_rob_rate: 0.03 },
        },
        //‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô
        robbery_card: {
          id: "robbery_card",
          name: "üõ°Ô∏è ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô",
          description: "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡πâ‡∏ô (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
          price: 15000,
          duration: 3600000, // 1 hours
          type: "temporary",
          effect: { robbery_card: true },
        },
      },
      // ‡∏¢‡∏®‡∏û‡∏¥‡πÄ‡∏®‡∏©
      roles: {
        vip: {
          id: "vip",
          name: "üëë ‡∏°‡∏´‡∏≤‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏µ‡∏û‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏ô(VIP)",
          description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ 15%, ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 20%",
          price: 10000000,
          type: "role",
          roleId: "1348538334603120644",
          effect: {
            income_boost: 0.15,
            fee_reduction: 0.2,
          },
        },
      },
    };
  }

  getShopItems() {
    return this.items;
  }

  // Add description for each category
  getCategoryInfo() {
    return {
      permanent: {
        name: "üõ°Ô∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏≤‡∏ß‡∏£",
        description: "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ñ‡∏≤‡∏ß‡∏£ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
        emoji: "üõ°Ô∏è",
        color: "#9B59B6",
        thumbnail: "https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152910/permanent_banner.png",
        note: "‚Ä¢ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î\n‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n‚Ä¢ ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
      },
      temporary: {
        name: "‚è≥ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
        description: "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
        emoji: "‚è≥",
        color: "#3498DB",
        thumbnail: "https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152911/temporary_banner.png",
        note: "‚Ä¢ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ä‡∏¥‡πâ‡∏ô / ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°\n‚Ä¢ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
      },
      roles: {
        name: "üëë ‡∏¢‡∏®‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        description: "‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡πà‡∏≤‡∏á‡πÜ",
        emoji: "üëë",
        color: "#F1C40F",
        thumbnail: "https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152912/roles_banner.png",
        note: "‚Ä¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n‚Ä¢ ‡∏°‡∏µ‡∏ú‡∏•‡∏ö‡∏ß‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á\n‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"
      },
      gems: {
        name: "üíé ‡πÄ‡∏û‡∏ä‡∏£‡∏Å‡∏≤‡∏ä‡∏≤",
        description: `**üíé ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡∏Å‡∏≤‡∏ä‡∏≤**
        
        üì± **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠**
        ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        - ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        - ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà <@1348499224656089100> ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πä‡∏Ñ‡πÑ‡∏´‡∏ô
        - ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà <@343340587396628480>

        **üè∑Ô∏èSupporter Discord ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£üè∑Ô∏è**
        
        üíé **‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô  (1 ‡∏ö‡∏≤‡∏ó = 2 ‡πÄ‡∏û‡∏ä‡∏£)**
        ‚Ä¢ 25 ‡∏ö‡∏≤‡∏ó = 50+5 ‡πÄ‡∏û‡∏ä‡∏£
        ‚Ä¢ 50 ‡∏ö‡∏≤‡∏ó = 100+15 ‡πÄ‡∏û‡∏ä‡∏£
        ‚Ä¢ 250 ‡∏ö‡∏≤‡∏ó = 500+100 ‡πÄ‡∏û‡∏ä‡∏£
        ‚Ä¢ 500 ‡∏ö‡∏≤‡∏ó = 1000+250 ‡πÄ‡∏û‡∏ä‡∏£
        ‚Ä¢ 1000 ‡∏ö‡∏≤‡∏ó = 2000+500 ‡πÄ‡∏û‡∏ä‡∏£ 

        üïê **‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏û‡∏ä‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô** üíé
        ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1    50 ‡∏ö‡∏≤‡∏ó  
        ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2   250 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö  100 ‡πÄ‡∏û‡∏ä‡∏£
        ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3   500 ‡∏ö‡∏≤‡∏ó  ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö  250 ‡πÄ‡∏û‡∏ä‡∏£

        ‚¨ÜÔ∏è **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏ä‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏ñ‡∏≤‡∏ß‡∏£)**
        ‡πÄ‡∏û‡∏¥‡πà‡∏° 50 ‡πÄ‡∏û‡∏ä‡∏£ / ‡∏ß‡∏±‡∏ô  200 ‡∏ö‡∏≤‡∏ó
        ‡πÄ‡∏û‡∏¥‡πà‡∏° 100 ‡πÄ‡∏û‡∏ä‡∏£ / ‡∏ß‡∏±‡∏ô  400 ‡∏ö‡∏≤‡∏ó
        ‡πÄ‡∏û‡∏¥‡πà‡∏° 250 ‡πÄ‡∏û‡∏ä‡∏£ / ‡∏ß‡∏±‡∏ô  1000 ‡∏ö‡∏≤‡∏ó


        ‚ö†Ô∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**
        ‚Ä¢ ‡πÄ‡∏û‡∏ä‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        ‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏° 25 ‡∏ö‡∏≤‡∏ó
        ‚Ä¢ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô`,
        emoji: "üíé",
        color: "#2EC4B6",
        thumbnail: "https://cdn.discordapp.com/attachments/1348498933587152910/1348498933587152913/gems_banner.png"
      },
    };
  }

  // Get item details for display with improved formatting
  getItemDetails(item) {
    let details = [];
    
    // Format price with Thai baht
    details.push(`üí∞ **‡∏£‡∏≤‡∏Ñ‡∏≤:** ${item.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);

    // Add duration if applicable
    if (item.duration) {
      const hours = item.duration / 3600000;
      details.push(`‚è≥ **‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:** ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    }

    // Add effect description
    details.push(`üìù **‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:** ${item.description}`);

    return details.join('\n');
  }

  // Get formatted item card for display
  getItemCard(item, userBalance = 0) {
    const canAfford = userBalance >= item.price;
    const priceColor = canAfford ? "GREEN" : "RED";
    
    let card = `## ${item.name}\n`;
    card += this.getItemDetails(item);
    
    return card;
  }

  // Helper method to get effect names in Thai
  getEffectName(effect) {
    const effectNames = {
      gambling_luck: "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô",
      work_bonus: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
      xp_boost: "EXP ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö",
      money_boost: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      income_boost: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
      fee_reduction: "‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°",
      success_rob_rate: "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô",
      bank_balance: "‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£",
      robbery_card: "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πâ‡∏ô",
    };
    return effectNames[effect] || effect;
  }

  // Get formatted list of items in a category for pagination
  getItemsForPage(category, page = 0, itemsPerPage = 3, userBalance = 0) {
    const categoryItems = this.items[category];
    if (!categoryItems) return { items: [], totalPages: 0 };
    
    const itemsList = Object.values(categoryItems);
    const totalPages = Math.ceil(itemsList.length / itemsPerPage);
    
    // Make sure page is in valid range
    page = Math.max(0, Math.min(page, totalPages - 1));
    
    const startIdx = page * itemsPerPage;
    const endIdx = Math.min(startIdx + itemsPerPage, itemsList.length);
    const itemsForPage = itemsList.slice(startIdx, endIdx);
    
    return {
      items: itemsForPage,
      totalPages,
      currentPage: page
    };
  }

  findItem(itemId) {
    try {
      for (const category of Object.values(this.items)) {
        if (itemId in category) {
          return category[itemId];
        }
      }
    } catch (e) {
      console.log(e);
      return null;
    }
  }

  async cleanupExpiredItems(userId) {
    const profile = await economy.getProfile(userId);
    if (!profile?.inventory) return;

    const now = Date.now();
    const validItems = profile.inventory.filter((item) => {
      return !item.expiresAt || item.expiresAt > now;
    });

    if (validItems.length !== profile.inventory.length) {
      await economy.updateProfile(userId, { inventory: validItems });
      return true; // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
    }
    return false;
  }

  async buyItem(userId, itemId, guildId = null, client = null) {
    try {
      const item = this.findItem(itemId);
      if (!item) return { success: false, reason: "item_not_found" };

      // Check if client is provided for role items
      if (item.type === "role" && (!guildId || !client)) {
        return { success: false, reason: "guild_or_client_required" };
      }

      const profile = await economy.getProfile(userId);
      if (!profile) return { success: false, reason: "no_profile" };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      if (profile.balance < item.price) {
        return { success: false, reason: "insufficient_funds" };
      }

      const now = Date.now();

      // ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô
      await this.cleanupExpiredItems(userId);

      let newItem;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ stack ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      if (item.type === "temporary") {
        const sameItems = profile.inventory.filter(
          (i) => i.id === itemId && (!i.expiresAt || i.expiresAt > now)
        );
        if (sameItems.length >= 5) {
          const embed = new EmbedBuilder()
            .setColor('#FF0000')
            .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÑ‡∏î‡πâ')
            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${item.name} ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!`)
            .addFields(
              { name: 'üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà', value: `${sameItems.length}/5 ‡∏ä‡∏¥‡πâ‡∏ô`, inline: true },
              { name: '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', value: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°' }
            )
            .setTimestamp();

          return { 
            success: false, 
            reason: "max_stack_reached",
            embed: embed 
          };
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasActiveItem = sameItems.some(i => i.active);

        // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        let latestExpiry = now;

        if (sameItems.length > 0) {
          const expiryTimes = sameItems
            .map((i) => i.expiresAt)
            .filter((time) => time && time > now);
          if (expiryTimes.length > 0) {
            latestExpiry = Math.max(...expiryTimes);
          }
        }

        newItem = {
          id: itemId,
          active: !hasActiveItem,
          expiresAt: latestExpiry + item.duration,
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
        profile.inventory.push(newItem);
      }
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ñ‡∏≤‡∏ß‡∏£
      else if (item.type === "permanent" || item.type === "role") {
        const hasItem = profile.inventory?.some(
          (i) => i.id === itemId && (!i.expiresAt || i.expiresAt > Date.now())
        );
        if (hasItem) {
          return { success: false, reason: "already_owned" };
        }

        newItem = {
          id: itemId,
          active: true,
        };
        
        profile.inventory.push(newItem);
      }

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      if (item.duration) {
        newItem.expiresAt = now + item.duration;
      }

      // Handle role items
      if (item.type === "role" && item.roleId) {
        try {
          const guild = await client.guilds.fetch(guildId);
          const member = await guild.members.fetch(userId);
          await member.roles.add(item.roleId);
        } catch (error) {
          console.error("Error adding role:", error);
          return { success: false, reason: "role_add_failed" };
        }
      }

      // ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
      profile.balance -= item.price;

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
      await economy.updateProfile(userId, {
        balance: profile.balance,
        inventory: profile.inventory,
      });

      return { success: true, item, newBalance: profile.balance };
    } catch (error) {
      console.error("Shop error:", error);
      return { success: false, reason: "system_error" };
    }
  }

  async checkEffects(userId) {
    const profile = await economy.getProfile(userId);
    if (!profile?.inventory) return {};

    await this.cleanupExpiredItems(userId);

    const effects = {
      gambling_luck: 0,
      work_bonus: 0,
      xp_boost: 0,
      money_boost: 0,
      income_boost: 0,
      fee_reduction: 0,
    };

    const now = Date.now();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    for (const inventoryItem of profile.inventory) {
      const item = this.findItem(inventoryItem.id);
      if (!item || !inventoryItem.active) continue;

      // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      if (inventoryItem.expiresAt && inventoryItem.expiresAt < now) {
        continue;
      }

      // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
      if (item.effect && typeof item.effect === "object") {
        for (const [effectType, value] of Object.entries(item.effect)) {
          effects[effectType] = (effects[effectType] || 0) + value;
        }
      }
    }

    return effects;
  }

  async useItem(userId, itemId) {
    const profile = await economy.getProfile(userId);
    if (!profile?.inventory) return { success: false, reason: "no_inventory" };

    const itemIndex = profile.inventory.findIndex((i) => i.id === itemId);
    if (itemIndex === -1) return { success: false, reason: "item_not_found" };

    await this.cleanupExpiredItems(userId);

    const inventoryItem = profile.inventory[itemIndex];
    const item = this.findItem(itemId);

    if (!item) return { success: false, reason: "invalid_item" };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (inventoryItem.expiresAt && inventoryItem.expiresAt < Date.now()) {
      return { success: false, reason: "expired" };
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    inventoryItem.active = !inventoryItem.active;
    await economy.updateProfile(userId, { inventory: profile.inventory });

    return {
      success: true,
      item,
      active: inventoryItem.active,
      expiresAt: inventoryItem.expiresAt,
    };
  }
}

module.exports = new ShopSystem();
